[
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "import ast"
    ],
    [
        "STORE_NAME",
        "import json"
    ],
    [
        "STORE_NAME",
        "from future import standard_library"
    ],
    [
        "LOAD_NAME",
        "standard_library"
    ],
    [
        "LOAD_ATTR",
        "standard_library.install_aliases"
    ],
    [
        "CALL",
        "standard_library.install_aliases()"
    ],
    [
        "STORE_NAME",
        "import token"
    ],
    [
        "STORE_NAME",
        "from future.utils import raise_from"
    ],
    [
        "STORE_NAME",
        "import ntpath"
    ],
    [
        "STORE_NAME",
        "import os"
    ],
    [
        "STORE_NAME",
        "import types"
    ],
    [
        "STORE_NAME",
        "from sys import version_info"
    ],
    [
        "STORE_NAME",
        "from typing import TypeVar, Union, List, Any, Iterator, Tuple, Iterable"
    ],
    [
        "STORE_NAME",
        "from typing import TypeVar, Union, List, Any, Iterator, Tuple, Iterable"
    ],
    [
        "STORE_NAME",
        "from typing import TypeVar, Union, List, Any, Iterator, Tuple, Iterable"
    ],
    [
        "STORE_NAME",
        "from typing import TypeVar, Union, List, Any, Iterator, Tuple, Iterable"
    ],
    [
        "STORE_NAME",
        "from typing import TypeVar, Union, List, Any, Iterator, Tuple, Iterable"
    ],
    [
        "STORE_NAME",
        "from typing import TypeVar, Union, List, Any, Iterator, Tuple, Iterable"
    ],
    [
        "STORE_NAME",
        "from typing import TypeVar, Union, List, Any, Iterator, Tuple, Iterable"
    ],
    [
        "STORE_NAME",
        "from typing import Type"
    ],
    [
        "STORE_NAME",
        "from typing import Deque"
    ],
    [
        "STORE_NAME",
        "from functools import lru_cache"
    ],
    [
        "STORE_NAME",
        "from littleutils import strip_required_prefix"
    ],
    [
        "LOAD_NAME",
        "version_info"
    ],
    [
        "LOAD_ATTR",
        "version_info.major"
    ],
    [
        "COMPARE_OP",
        "version_info.major == 2"
    ],
    [
        "STORE_NAME",
        "PY2"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "UNARY_NOT",
        "not PY2"
    ],
    [
        "STORE_NAME",
        "PY3"
    ],
    [
        "LOAD_NAME",
        "TypeVar"
    ],
    [
        "CALL",
        "TypeVar('T')"
    ],
    [
        "STORE_NAME",
        "T"
    ],
    [
        "LOAD_NAME",
        "TypeVar"
    ],
    [
        "CALL",
        "TypeVar('RT')"
    ],
    [
        "STORE_NAME",
        "RT"
    ],
    [
        "STORE_NAME",
        "IPYTHON_FILE_PATH"
    ],
    [
        "STORE_NAME",
        "FILE_SENTINEL_NAME"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "LOAD_NAME",
        "unicode"
    ],
    [
        "STORE_NAME",
        "Text"
    ],
    [
        "LOAD_NAME",
        "str"
    ],
    [
        "STORE_NAME",
        "Text"
    ],
    [
        "STORE_NAME",
        "def path_leaf(path):\n    # type: (str) -> str\n    # http://stackoverflow.com/a/8384788/2482744\n    head, tail = ntpath.split(path)\n    return tail or ntpath.basename(head)"
    ],
    [
        "STORE_NAME",
        "def common_ancestor(paths):\n    # type: (List[str]) -> str\n    \"\"\"\n    Returns a path to a directory that contains all the given absolute paths\n    \"\"\"\n    prefix = os.path.commonprefix(paths)\n\n    # Ensure that the prefix doesn't end in part of the name of a file/directory\n    prefix = ntpath.split(prefix)[0]\n\n    # Ensure that it ends with a slash\n    first_char_after = paths[0][len(prefix)]\n    if first_char_after in r'\\/':\n        prefix += first_char_after\n\n    return prefix"
    ],
    [
        "STORE_NAME",
        "def short_path(path, all_paths):\n    # type: (str, List[str]) -> str\n    if path == IPYTHON_FILE_PATH:\n        return path\n\n    all_paths = [f for f in all_paths\n                 if f != IPYTHON_FILE_PATH]\n    prefix = common_ancestor(all_paths)\n    if prefix in r'\\/':\n        prefix = ''\n    return strip_required_prefix(path, prefix) or path_leaf(path)"
    ],
    [
        "STORE_NAME",
        "def fix_abs_path(path):\n    if path == IPYTHON_FILE_PATH:\n        return path\n    if os.path.sep == '/' and not path.startswith('/'):\n        path = '/' + path\n    return path"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "STORE_NAME",
        "    def correct_type(obj):\n        \"\"\"\n        Returns the correct type of obj, regardless of __class__ assignment\n        or old-style classes:\n\n        >>> class A:\n        ...     pass\n        ...\n        ...\n        ... class B(object):\n        ...     pass\n        ...\n        ...\n        ... class C(object):\n        ...     __class__ = A\n        ...\n        >>> correct_type(A()) is A\n        True\n        >>> correct_type(B()) is B\n        True\n        >>> correct_type(C()) is C\n        True\n        \"\"\"\n        t = type(obj)\n        # noinspection PyUnresolvedReferences\n        if t is types.InstanceType:\n            return obj.__class__\n        return t"
    ],
    [
        "LOAD_NAME",
        "type"
    ],
    [
        "STORE_NAME",
        "correct_type"
    ],
    [
        "STORE_NAME",
        "def of_type(type_or_tuple, iterable):\n    # type: (Union[type, Tuple[Union[type, tuple], ...]], Iterable[Any]) -> Iterator[Any]\n    return (x for x in iterable if isinstance(x, type_or_tuple))"
    ],
    [
        "STORE_NAME",
        "def safe_next(it):\n    # type: (Iterator[T]) -> T\n    \"\"\"\n    next() can raise a StopIteration which can cause strange bugs inside generators.\n    \"\"\"\n    try:\n        return next(it)\n    except StopIteration as e:\n        raise_from(RuntimeError, e)\n        raise"
    ],
    [
        "STORE_NAME",
        "def one_or_none(expression):\n    \"\"\"Performs a one_or_none on a sqlalchemy expression.\"\"\"\n    if hasattr(expression, 'one_or_none'):\n        return expression.one_or_none()\n    result = expression.all()\n    if len(result) == 0:\n        return None\n    elif len(result) == 1:\n        return result[0]\n    else:\n        raise Exception(\"There is more than one item returned for the supplied filter\")"
    ],
    [
        "STORE_NAME",
        "def flatten_list(lst):\n    result = []\n    for x in lst:\n        if isinstance(x, list):\n            result.extend(flatten_list(x))\n        else:\n            result.append(x)\n    return result"
    ],
    [
        "STORE_NAME",
        "def is_lambda(f):\n    try:\n        code = f.__code__\n    except AttributeError:\n        return False\n    return code.co_name == (lambda: 0).__code__.co_name"
    ],
    [
        "LOAD_NAME",
        "json"
    ],
    [
        "LOAD_ATTR",
        "json.JSONEncoder"
    ],
    [
        "CALL",
        "class ProtocolEncoder(json.JSONEncoder):\n    def default(self, o):\n        try:\n            method = o.as_json\n        except AttributeError:\n            return super(ProtocolEncoder, self).default(o)\n        else:\n            return method()"
    ],
    [
        "STORE_NAME",
        "class ProtocolEncoder(json.JSONEncoder):\n    def default(self, o):\n        try:\n            method = o.as_json\n        except AttributeError:\n            return super(ProtocolEncoder, self).default(o)\n        else:\n            return method()"
    ],
    [
        "STORE_NAME",
        "from tokenize import open as open_with_encoding_check"
    ],
    [
        "STORE_NAME",
        "def read_source_file(filename):\n    from lib2to3.pgen2.tokenize import cookie_re\n\n    if filename.endswith('.pyc'):\n        filename = filename[:-1]\n\n    with open_with_encoding_check(filename) as f:\n        return ''.join([\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ])"
    ],
    [
        "STORE_NAME",
        "def source_without_decorators(tokens, function_node):\n    def_token = safe_next(t for t in tokens.get_tokens(function_node)\n                          if t.string == 'def' and t.type == token.NAME)\n\n    startpos = def_token.startpos\n    source = tokens.text[startpos:function_node.last_token.endpos].rstrip()\n    assert source.startswith('def')\n\n    return startpos, source"
    ],
    [
        "STORE_NAME",
        "def prn(*args):\n    for arg in args:\n        print(arg)\n    if len(args) == 1:\n        return args[0]\n    return args"
    ],
    [
        "STORE_NAME",
        "def is_ipython_cell(filename):\n    return filename.startswith('<ipython-input-')"
    ],
    [
        "STORE_NAME",
        "def is_future_import(node):\n    return isinstance(node, ast.ImportFrom) and node.module == \"__future__\""
    ],
    [
        "STORE_NAME",
        "def get_unfrozen_datetime():\n    try:\n        # if freezegun could be active, we need to use real_datetime to ensure we use the actual time instead of the\n        # time set by freezegun.\n        # we have to import this at the last possible moment because birdeye is very likely to be imported before\n        # freezegun is activated.\n        from freezegun.api import real_datetime\n    except ImportError:\n        from datetime import datetime as real_datetime\n\n    return real_datetime.now()"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_NAME",
        "type"
    ],
    [
        "STORE_NAME",
        "Type"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "STORE_NAME",
        "from collections import deque as Deque"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "STORE_NAME",
        "from backports.functools_lru_cache import lru_cache"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "STORE_NAME",
        "from lib2to3.pgen2.tokenize import detect_encoding"
    ],
    [
        "STORE_NAME",
        "import io"
    ],
    [
        "STORE_NAME",
        "    def open_with_encoding_check(filename):  # type: ignore\n        \"\"\"Open a file in read only mode using the encoding detected by\n        detect_encoding().\n        \"\"\"\n        fp = io.open(filename, 'rb')\n        try:\n            encoding, lines = detect_encoding(fp.readline)\n            fp.seek(0)\n            text = io.TextIOWrapper(fp, encoding, line_buffering=True)\n            text.mode = 'r'\n            return text\n        except:\n            fp.close()\n            raise"
    ],
    [
        "LOAD_GLOBAL",
        "ntpath"
    ],
    [
        "LOAD_ATTR",
        "ntpath.split"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL",
        "ntpath.split(path)"
    ],
    [
        "STORE_FAST",
        "head"
    ],
    [
        "STORE_FAST",
        "tail"
    ],
    [
        "LOAD_FAST",
        "tail"
    ],
    [
        "LOAD_GLOBAL",
        "ntpath"
    ],
    [
        "LOAD_ATTR",
        "ntpath.basename"
    ],
    [
        "LOAD_FAST",
        "head"
    ],
    [
        "CALL",
        "ntpath.basename(head)"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_ATTR",
        "os.path.commonprefix"
    ],
    [
        "LOAD_FAST",
        "paths"
    ],
    [
        "CALL",
        "os.path.commonprefix(paths)"
    ],
    [
        "STORE_FAST",
        "prefix"
    ],
    [
        "LOAD_GLOBAL",
        "ntpath"
    ],
    [
        "LOAD_ATTR",
        "ntpath.split"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "CALL",
        "ntpath.split(prefix)"
    ],
    [
        "BINARY_SUBSCR",
        "ntpath.split(prefix)[0]"
    ],
    [
        "STORE_FAST",
        "prefix"
    ],
    [
        "LOAD_FAST",
        "paths"
    ],
    [
        "BINARY_SUBSCR",
        "paths[0]"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "CALL",
        "len(prefix)"
    ],
    [
        "BINARY_SUBSCR",
        "paths[0][len(prefix)]"
    ],
    [
        "STORE_FAST",
        "first_char_after"
    ],
    [
        "LOAD_FAST",
        "first_char_after"
    ],
    [
        "CONTAINS_OP",
        "first_char_after in r'\\/'"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "LOAD_FAST",
        "first_char_after"
    ],
    [
        "BINARY_OP",
        "prefix += first_char_after"
    ],
    [
        "STORE_FAST",
        "prefix"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "COMPARE_OP",
        "path == IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "all_paths"
    ],
    [
        "LOAD_FAST_AND_CLEAR",
        "[f for f in all_paths\n                 if f != IPYTHON_FILE_PATH]"
    ],
    [
        "STORE_FAST",
        "f"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "COMPARE_OP",
        "f != IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "STORE_FAST",
        "all_paths"
    ],
    [
        "STORE_FAST",
        "[f for f in all_paths\n                 if f != IPYTHON_FILE_PATH]"
    ],
    [
        "LOAD_GLOBAL",
        "common_ancestor"
    ],
    [
        "LOAD_FAST",
        "all_paths"
    ],
    [
        "CALL",
        "common_ancestor(all_paths)"
    ],
    [
        "STORE_FAST",
        "prefix"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "CONTAINS_OP",
        "prefix in r'\\/'"
    ],
    [
        "STORE_FAST",
        "prefix"
    ],
    [
        "LOAD_GLOBAL",
        "strip_required_prefix"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "CALL",
        "strip_required_prefix(path, prefix)"
    ],
    [
        "LOAD_GLOBAL",
        "path_leaf"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL",
        "path_leaf(path)"
    ],
    [
        "STORE_FAST",
        "[f for f in all_paths\n                 if f != IPYTHON_FILE_PATH]"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "COMPARE_OP",
        "path == IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_ATTR",
        "os.path.sep"
    ],
    [
        "COMPARE_OP",
        "os.path.sep == '/'"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_ATTR",
        "path.startswith"
    ],
    [
        "CALL",
        "path.startswith('/')"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "BINARY_OP",
        "'/' + path"
    ],
    [
        "STORE_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "obj"
    ],
    [
        "CALL",
        "type(obj)"
    ],
    [
        "STORE_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_GLOBAL",
        "types"
    ],
    [
        "LOAD_ATTR",
        "types.InstanceType"
    ],
    [
        "IS_OP",
        "t is types.InstanceType"
    ],
    [
        "LOAD_FAST",
        "obj"
    ],
    [
        "LOAD_ATTR",
        "obj.__class__"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "iterable"
    ],
    [
        "CALL",
        "(x for x in iterable if isinstance(x, type_or_tuple))"
    ],
    [
        "LOAD_FAST",
        "(x for x in iterable if isinstance(x, type_or_tuple))"
    ],
    [
        "STORE_FAST",
        "x"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_DEREF",
        "type_or_tuple"
    ],
    [
        "CALL",
        "isinstance(x, type_or_tuple)"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_GLOBAL",
        "next"
    ],
    [
        "LOAD_FAST",
        "it"
    ],
    [
        "CALL",
        "next(it)"
    ],
    [
        "LOAD_GLOBAL",
        "StopIteration"
    ],
    [
        "STORE_FAST",
        "    except StopIteration as e:\n        raise_from(RuntimeError, e)\n        raise"
    ],
    [
        "LOAD_GLOBAL",
        "raise_from"
    ],
    [
        "LOAD_GLOBAL",
        "RuntimeError"
    ],
    [
        "LOAD_FAST",
        "e"
    ],
    [
        "CALL",
        "raise_from(RuntimeError, e)"
    ],
    [
        "LOAD_GLOBAL",
        "hasattr"
    ],
    [
        "LOAD_FAST",
        "expression"
    ],
    [
        "CALL",
        "hasattr(expression, 'one_or_none')"
    ],
    [
        "LOAD_FAST",
        "expression"
    ],
    [
        "LOAD_ATTR",
        "expression.one_or_none"
    ],
    [
        "CALL",
        "expression.one_or_none()"
    ],
    [
        "LOAD_FAST",
        "expression"
    ],
    [
        "LOAD_ATTR",
        "expression.all"
    ],
    [
        "CALL",
        "expression.all()"
    ],
    [
        "STORE_FAST",
        "result"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "CALL",
        "len(result)"
    ],
    [
        "COMPARE_OP",
        "len(result) == 0"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "CALL",
        "len(result)"
    ],
    [
        "COMPARE_OP",
        "len(result) == 1"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "BINARY_SUBSCR",
        "result[0]"
    ],
    [
        "LOAD_GLOBAL",
        "Exception"
    ],
    [
        "CALL",
        "Exception(\"There is more than one item returned for the supplied filter\")"
    ],
    [
        "STORE_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "lst"
    ],
    [
        "STORE_FAST",
        "x"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL",
        "isinstance(x, list)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_ATTR",
        "result.extend"
    ],
    [
        "LOAD_GLOBAL",
        "flatten_list"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL",
        "flatten_list(x)"
    ],
    [
        "CALL",
        "result.extend(flatten_list(x))"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_ATTR",
        "result.append"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL",
        "result.append(x)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "LOAD_ATTR",
        "f.__code__"
    ],
    [
        "STORE_FAST",
        "code"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "LOAD_ATTR",
        "code.co_name"
    ],
    [
        "LOAD_ATTR",
        "(lambda: 0).__code__"
    ],
    [
        "LOAD_ATTR",
        "(lambda: 0).__code__.co_name"
    ],
    [
        "COMPARE_OP",
        "code.co_name == (lambda: 0).__code__.co_name"
    ],
    [
        "LOAD_GLOBAL",
        "AttributeError"
    ],
    [
        "STORE_NAME",
        "    def default(self, o):\n        try:\n            method = o.as_json\n        except AttributeError:\n            return super(ProtocolEncoder, self).default(o)\n        else:\n            return method()"
    ],
    [
        "LOAD_FAST",
        "o"
    ],
    [
        "LOAD_ATTR",
        "o.as_json"
    ],
    [
        "STORE_FAST",
        "method"
    ],
    [
        "LOAD_FAST",
        "method"
    ],
    [
        "CALL",
        "method()"
    ],
    [
        "LOAD_GLOBAL",
        "AttributeError"
    ],
    [
        "LOAD_GLOBAL",
        "super"
    ],
    [
        "LOAD_GLOBAL",
        "ProtocolEncoder"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_SUPER_ATTR",
        "super(ProtocolEncoder, self).default"
    ],
    [
        "LOAD_FAST",
        "o"
    ],
    [
        "CALL",
        "super(ProtocolEncoder, self).default(o)"
    ],
    [
        "STORE_FAST",
        "from lib2to3.pgen2.tokenize import cookie_re"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_ATTR",
        "filename.endswith"
    ],
    [
        "CALL",
        "filename.endswith('.pyc')"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "BINARY_SLICE",
        "filename[:-1]"
    ],
    [
        "STORE_FAST",
        "filename"
    ],
    [
        "LOAD_GLOBAL",
        "open_with_encoding_check"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "CALL",
        "open_with_encoding_check(filename)"
    ],
    [
        "STORE_FAST",
        "f"
    ],
    [
        "LOAD_ATTR",
        "''.join"
    ],
    [
        "LOAD_GLOBAL",
        "enumerate"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "CALL",
        "enumerate(f)"
    ],
    [
        "LOAD_FAST_AND_CLEAR",
        "[\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ]"
    ],
    [
        "LOAD_FAST_AND_CLEAR",
        "[\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ]"
    ],
    [
        "STORE_FAST",
        "i"
    ],
    [
        "STORE_FAST",
        "line"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "COMPARE_OP",
        "i < 2"
    ],
    [
        "LOAD_FAST",
        "cookie_re"
    ],
    [
        "LOAD_ATTR",
        "cookie_re.match"
    ],
    [
        "LOAD_FAST",
        "line"
    ],
    [
        "CALL",
        "cookie_re.match(line)"
    ],
    [
        "LOAD_FAST",
        "line"
    ],
    [
        "STORE_FAST",
        "[\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ]"
    ],
    [
        "STORE_FAST",
        "[\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ]"
    ],
    [
        "CALL",
        "''.join([\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ])"
    ],
    [
        "CALL",
        "    with open_with_encoding_check(filename) as f:\n        return ''.join([\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ])"
    ],
    [
        "STORE_FAST",
        "[\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ]"
    ],
    [
        "STORE_FAST",
        "[\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ]"
    ],
    [
        "LOAD_GLOBAL",
        "safe_next"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_ATTR",
        "tokens.get_tokens"
    ],
    [
        "LOAD_FAST",
        "function_node"
    ],
    [
        "CALL",
        "tokens.get_tokens(function_node)"
    ],
    [
        "CALL",
        "(t for t in tokens.get_tokens(function_node)\n                          if t.string == 'def' and t.type == token.NAME)"
    ],
    [
        "CALL",
        "safe_next(t for t in tokens.get_tokens(function_node)\n                          if t.string == 'def' and t.type == token.NAME)"
    ],
    [
        "STORE_FAST",
        "def_token"
    ],
    [
        "LOAD_FAST",
        "def_token"
    ],
    [
        "LOAD_ATTR",
        "def_token.startpos"
    ],
    [
        "STORE_FAST",
        "startpos"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_ATTR",
        "tokens.text"
    ],
    [
        "LOAD_FAST",
        "startpos"
    ],
    [
        "LOAD_FAST",
        "function_node"
    ],
    [
        "LOAD_ATTR",
        "function_node.last_token"
    ],
    [
        "LOAD_ATTR",
        "function_node.last_token.endpos"
    ],
    [
        "BINARY_SLICE",
        "tokens.text[startpos:function_node.last_token.endpos]"
    ],
    [
        "LOAD_ATTR",
        "tokens.text[startpos:function_node.last_token.endpos].rstrip"
    ],
    [
        "CALL",
        "tokens.text[startpos:function_node.last_token.endpos].rstrip()"
    ],
    [
        "STORE_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_ATTR",
        "source.startswith"
    ],
    [
        "CALL",
        "source.startswith('def')"
    ],
    [
        "LOAD_FAST",
        "startpos"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "(t for t in tokens.get_tokens(function_node)\n                          if t.string == 'def' and t.type == token.NAME)"
    ],
    [
        "STORE_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_ATTR",
        "t.string"
    ],
    [
        "COMPARE_OP",
        "t.string == 'def'"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_ATTR",
        "t.type"
    ],
    [
        "LOAD_GLOBAL",
        "token"
    ],
    [
        "LOAD_ATTR",
        "token.NAME"
    ],
    [
        "COMPARE_OP",
        "t.type == token.NAME"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "STORE_FAST",
        "arg"
    ],
    [
        "LOAD_GLOBAL",
        "print"
    ],
    [
        "LOAD_FAST",
        "arg"
    ],
    [
        "CALL",
        "print(arg)"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "CALL",
        "len(args)"
    ],
    [
        "COMPARE_OP",
        "len(args) == 1"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "BINARY_SUBSCR",
        "args[0]"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_ATTR",
        "filename.startswith"
    ],
    [
        "CALL",
        "filename.startswith('<ipython-input-')"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.ImportFrom"
    ],
    [
        "CALL",
        "isinstance(node, ast.ImportFrom)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.module"
    ],
    [
        "COMPARE_OP",
        "node.module == \"__future__\""
    ],
    [
        "STORE_FAST",
        "from freezegun.api import real_datetime"
    ],
    [
        "LOAD_FAST",
        "real_datetime"
    ],
    [
        "LOAD_ATTR",
        "real_datetime.now"
    ],
    [
        "CALL",
        "real_datetime.now()"
    ],
    [
        "LOAD_GLOBAL",
        "ImportError"
    ],
    [
        "STORE_FAST",
        "from datetime import datetime as real_datetime"
    ],
    [
        "LOAD_FAST",
        "real_datetime"
    ],
    [
        "LOAD_ATTR",
        "real_datetime.now"
    ],
    [
        "CALL",
        "real_datetime.now()"
    ],
    [
        "LOAD_GLOBAL",
        "io"
    ],
    [
        "LOAD_ATTR",
        "io.open"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "CALL",
        "io.open(filename, 'rb')"
    ],
    [
        "STORE_FAST",
        "fp"
    ],
    [
        "LOAD_GLOBAL",
        "detect_encoding"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_ATTR",
        "fp.readline"
    ],
    [
        "CALL",
        "detect_encoding(fp.readline)"
    ],
    [
        "STORE_FAST",
        "encoding"
    ],
    [
        "STORE_FAST",
        "lines"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_ATTR",
        "fp.seek"
    ],
    [
        "CALL",
        "fp.seek(0)"
    ],
    [
        "LOAD_GLOBAL",
        "io"
    ],
    [
        "LOAD_ATTR",
        "io.TextIOWrapper"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_FAST",
        "encoding"
    ],
    [
        "CALL",
        "io.TextIOWrapper(fp, encoding, line_buffering=True)"
    ],
    [
        "STORE_FAST",
        "text"
    ],
    [
        "LOAD_FAST",
        "text"
    ],
    [
        "STORE_ATTR",
        "text.mode"
    ],
    [
        "LOAD_FAST",
        "text"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_ATTR",
        "fp.close"
    ],
    [
        "CALL",
        "fp.close()"
    ]
]