[
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "import json"
    ],
    [
        "STORE_NAME",
        "from collections import OrderedDict"
    ],
    [
        "STORE_NAME",
        "from functools import partial"
    ],
    [
        "STORE_NAME",
        "from os.path import basename"
    ],
    [
        "STORE_NAME",
        "from future import standard_library"
    ],
    [
        "STORE_NAME",
        "from littleutils import DecentJSONEncoder, withattrs, group_by_attr"
    ],
    [
        "STORE_NAME",
        "from littleutils import DecentJSONEncoder, withattrs, group_by_attr"
    ],
    [
        "STORE_NAME",
        "from littleutils import DecentJSONEncoder, withattrs, group_by_attr"
    ],
    [
        "LOAD_NAME",
        "standard_library"
    ],
    [
        "LOAD_METHOD",
        "standard_library.install_aliases"
    ],
    [
        "CALL_METHOD",
        "standard_library.install_aliases()"
    ],
    [
        "STORE_NAME",
        "import argparse"
    ],
    [
        "STORE_NAME",
        "import os"
    ],
    [
        "STORE_NAME",
        "import sys"
    ],
    [
        "STORE_NAME",
        "from flask import Flask, request, jsonify, url_for"
    ],
    [
        "STORE_NAME",
        "from flask import Flask, request, jsonify, url_for"
    ],
    [
        "STORE_NAME",
        "from flask import Flask, request, jsonify, url_for"
    ],
    [
        "STORE_NAME",
        "from flask import Flask, request, jsonify, url_for"
    ],
    [
        "STORE_NAME",
        "from flask.templating import render_template"
    ],
    [
        "STORE_NAME",
        "from flask_humanize import Humanize"
    ],
    [
        "STORE_NAME",
        "from werkzeug.routing import PathConverter"
    ],
    [
        "STORE_NAME",
        "import sqlalchemy"
    ],
    [
        "STORE_NAME",
        "from birdseye.db import Database"
    ],
    [
        "STORE_NAME",
        "from birdseye.utils import short_path, IPYTHON_FILE_PATH, fix_abs_path, is_ipython_cell"
    ],
    [
        "STORE_NAME",
        "from birdseye.utils import short_path, IPYTHON_FILE_PATH, fix_abs_path, is_ipython_cell"
    ],
    [
        "STORE_NAME",
        "from birdseye.utils import short_path, IPYTHON_FILE_PATH, fix_abs_path, is_ipython_cell"
    ],
    [
        "STORE_NAME",
        "from birdseye.utils import short_path, IPYTHON_FILE_PATH, fix_abs_path, is_ipython_cell"
    ],
    [
        "LOAD_NAME",
        "Flask"
    ],
    [
        "CALL_FUNCTION",
        "Flask('birdseye')"
    ],
    [
        "STORE_NAME",
        "app"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_ATTR",
        "app.jinja_env"
    ],
    [
        "STORE_ATTR",
        "app.jinja_env.auto_reload"
    ],
    [
        "LOAD_NAME",
        "Humanize"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "CALL_FUNCTION",
        "Humanize(app)"
    ],
    [
        "LOAD_NAME",
        "PathConverter"
    ],
    [
        "CALL_FUNCTION",
        "class FileConverter(PathConverter):\n    regex = '.*?'"
    ],
    [
        "STORE_NAME",
        "class FileConverter(PathConverter):\n    regex = '.*?'"
    ],
    [
        "LOAD_NAME",
        "FileConverter"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_ATTR",
        "app.url_map"
    ],
    [
        "LOAD_ATTR",
        "app.url_map.converters"
    ],
    [
        "STORE_SUBSCR",
        "app.url_map.converters['file']"
    ],
    [
        "LOAD_NAME",
        "Database"
    ],
    [
        "CALL_FUNCTION",
        "Database()"
    ],
    [
        "STORE_NAME",
        "db"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.Session"
    ],
    [
        "STORE_NAME",
        "Session"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.Function"
    ],
    [
        "STORE_NAME",
        "Function"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.Call"
    ],
    [
        "STORE_NAME",
        "Call"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/')"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/')"
    ],
    [
        "STORE_NAME",
        "@app.route('/')\n@db.provide_session\ndef index(session):\n    all_paths = db.all_file_paths()\n\n    recent_calls = (session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)\n                        .order_by(Call.start_time.desc())[:100])\n\n    files = OrderedDict()\n\n    for row in recent_calls:\n        if is_ipython_cell(row.file):\n            continue\n        files.setdefault(\n            row.file, OrderedDict()\n        ).setdefault(\n            row.name, row\n        )\n\n    for path in all_paths:\n        files.setdefault(\n            path, OrderedDict()\n        )\n\n    short = partial(short_path, all_paths=all_paths)\n\n    return render_template('index.html',\n                           short=short,\n                           files=files)"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/file/<file:path>')"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/file/<file:path>')"
    ],
    [
        "STORE_NAME",
        "@app.route('/file/<file:path>')\n@db.provide_session\ndef file_view(session, path):\n    path = fix_abs_path(path)\n\n    # Get all calls and functions in this file\n    filtered_calls = (session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by(file=path)\n                      .subquery('filtered_calls'))\n\n    # Get the latest call *time* for each function in the file\n    latest_calls = session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by(\n        filtered_calls.c.name,\n    ).subquery('latest_calls')\n\n    # Get the latest call for each function\n    query = session.query(filtered_calls).join(\n        latest_calls,\n        sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )\n    ).order_by(filtered_calls.c.start_time.desc())\n    funcs = group_by_attr(query, 'type')\n\n    # Add any functions which were never called\n    all_funcs = sorted(session.query(Function.name, Function.type)\n                       .filter_by(file=path)\n                       .distinct())\n    func_names = {row.name for row in query}\n    for func in all_funcs:\n        if func.name not in func_names:\n            funcs[func.type].append(func)\n\n    return render_template('file.html',\n                           funcs=funcs,\n                           is_ipython=path == IPYTHON_FILE_PATH,\n                           full_path=path,\n                           short_path=basename(path))"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/file/<file:path>/__function__/<func_name>')"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/file/<file:path>/__function__/<func_name>')"
    ],
    [
        "STORE_NAME",
        "@app.route('/file/<file:path>/__function__/<func_name>')\n@db.provide_session\ndef func_view(session, path, func_name):\n    path = fix_abs_path(path)\n    query = get_calls(session, path, func_name, 200)\n    if query:\n        func = query[0]\n        calls = [withattrs(Call(), **row._asdict()) for row in query]\n    else:\n        func = session.query(Function).filter_by(file=path, name=func_name)[0]\n        calls = None\n\n    return render_template('function.html',\n                           func=func,\n                           short_path=basename(path),\n                           calls=calls)"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/api/file/<file:path>/__function__/<func_name>/latest_call/')"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/api/file/<file:path>/__function__/<func_name>/latest_call/')"
    ],
    [
        "STORE_NAME",
        "@app.route('/api/file/<file:path>/__function__/<func_name>/latest_call/')\n@db.provide_session\ndef latest_call(session, path, func_name):\n    path = fix_abs_path(path)\n    call = get_calls(session, path, func_name, 1)[0]\n    return jsonify(dict(\n        id=call.id,\n        url=url_for(call_view.__name__,\n                    call_id=call.id),\n    ))"
    ],
    [
        "STORE_NAME",
        "def get_calls(session, path, func_name, limit):\n    return (session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)\n                .order_by(Call.start_time.desc())[:limit])"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "db.provide_session"
    ],
    [
        "STORE_NAME",
        "@db.provide_session\ndef base_call_view(session, call_id, template):\n    call = session.query(Call).filter_by(id=call_id).one()\n    func = call.function\n    return render_template(template,\n                           short_path=basename(func.file),\n                           call=call,\n                           func=func)"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/call/<call_id>')"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/call/<call_id>')"
    ],
    [
        "STORE_NAME",
        "@app.route('/call/<call_id>')\ndef call_view(call_id):\n    return base_call_view(call_id, 'call.html')"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/ipython_call/<call_id>')"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/ipython_call/<call_id>')"
    ],
    [
        "STORE_NAME",
        "@app.route('/ipython_call/<call_id>')\ndef ipython_call_view(call_id):\n    return base_call_view(call_id, 'ipython_call.html')"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/ipython_iframe/<call_id>')"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/ipython_iframe/<call_id>')"
    ],
    [
        "STORE_NAME",
        "@app.route('/ipython_iframe/<call_id>')\ndef ipython_iframe_view(call_id):\n    \"\"\"\n    This view isn't generally used, it's just an easy way to play with the template\n    without a notebook.\n    \"\"\"\n    return render_template('ipython_iframe.html',\n                           container_id='1234',\n                           port=7777,\n                           call_id=call_id)"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_ATTR",
        "app.route"
    ],
    [
        "CALL_FUNCTION_KW",
        "app.route('/kill', methods=['POST'])"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/kill', methods=['POST'])"
    ],
    [
        "STORE_NAME",
        "@app.route('/kill', methods=['POST'])\ndef kill():\n    func = request.environ.get('werkzeug.server.shutdown')\n    if func is None:\n        raise RuntimeError('Not running with the Werkzeug Server')\n    func()\n    return 'Server shutting down...'"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/api/call/<call_id>')"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/api/call/<call_id>')"
    ],
    [
        "STORE_NAME",
        "@app.route('/api/call/<call_id>')\n@db.provide_session\ndef api_call_view(session, call_id):\n    call = session.query(Call).filter_by(id=call_id).one()\n    func = call.function\n    return DecentJSONEncoder().encode(dict(\n        call=dict(data=call.parsed_data, **Call.basic_dict(call)),\n        function=dict(data=func.parsed_data, **Function.basic_dict(func))))"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_METHOD",
        "app.route"
    ],
    [
        "CALL_METHOD",
        "app.route('/api/calls_by_body_hash/<body_hash>')"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/api/calls_by_body_hash/<body_hash>')"
    ],
    [
        "STORE_NAME",
        "@app.route('/api/calls_by_body_hash/<body_hash>')\n@db.provide_session\ndef calls_by_body_hash(session, body_hash):\n    query = (session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)\n                 .order_by(Call.start_time.desc())[:200])\n\n    calls = [Call.basic_dict(withattrs(Call(), **row._asdict()))\n             for row in query]\n\n    function_data_set = {row.data for row in query}\n    ranges = set()\n    loop_ranges = set()\n    for function_data in function_data_set:\n        function_data = json.loads(function_data)\n\n        def add(key, ranges_set):\n            for node in function_data[key]:\n                ranges_set.add((node['start'], node['end']))\n\n        add('node_ranges', ranges)\n\n        # All functions are expected to have the same set\n        # of loop nodes\n        current_loop_ranges = set()\n        add('loop_ranges', current_loop_ranges)\n        assert loop_ranges in (set(), current_loop_ranges)\n        loop_ranges = current_loop_ranges\n\n    ranges = [dict(start=start, end=end) for start, end in ranges]\n    loop_ranges = [dict(start=start, end=end) for start, end in loop_ranges]\n\n    return DecentJSONEncoder().encode(dict(\n        calls=calls, ranges=ranges, loop_ranges=loop_ranges))"
    ],
    [
        "LOAD_NAME",
        "app"
    ],
    [
        "LOAD_ATTR",
        "app.route"
    ],
    [
        "CALL_FUNCTION_KW",
        "app.route('/api/body_hashes_present/', methods=['POST'])"
    ],
    [
        "LOAD_NAME",
        "db"
    ],
    [
        "LOAD_ATTR",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "db.provide_session"
    ],
    [
        "CALL_FUNCTION",
        "app.route('/api/body_hashes_present/', methods=['POST'])"
    ],
    [
        "STORE_NAME",
        "@app.route('/api/body_hashes_present/', methods=['POST'])\n@db.provide_session\ndef body_hashes_present(session):\n    hashes = request.get_json()\n    query = (session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter(Function.body_hash.in_(hashes))\n             .group_by(Function.body_hash))\n    return DecentJSONEncoder().encode([\n        dict(hash=h, count=count)\n        for h, count in query\n    ])"
    ],
    [
        "LOAD_NAME",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.argv"
    ],
    [
        "BINARY_SUBSCR",
        "sys.argv[1:]"
    ],
    [
        "STORE_NAME",
        "def main(argv=sys.argv[1:]):\n    # Support legacy CLI where there was just one positional argument: the port\n    if len(argv) == 1 and argv[0].isdigit():\n        argv.insert(0, '--port')\n\n    parser = argparse.ArgumentParser(description=\"Bird's Eye: A graphical Python debugger\")\n    parser.add_argument('-p', '--port', help='HTTP port, default is 7777', default=7777, type=int)\n    parser.add_argument('--host', help=\"HTTP host, default is 'localhost'\", default='localhost')\n\n    args = parser.parse_args(argv)\n    app.run(\n        port=args.port,\n        host=args.host,\n        use_reloader=os.environ.get('BIRDSEYE_RELOADER') == '1',\n    )"
    ],
    [
        "LOAD_NAME",
        "__name__"
    ],
    [
        "COMPARE_OP",
        "__name__ == '__main__'"
    ],
    [
        "LOAD_NAME",
        "main"
    ],
    [
        "CALL_FUNCTION",
        "main()"
    ],
    [
        "LOAD_NAME",
        "class FileConverter(PathConverter):\n    regex = '.*?'"
    ],
    [
        "STORE_NAME",
        "class FileConverter(PathConverter):\n    regex = '.*?'"
    ],
    [
        "STORE_NAME",
        "class FileConverter(PathConverter):\n    regex = '.*?'"
    ],
    [
        "STORE_NAME",
        "regex"
    ],
    [
        "LOAD_GLOBAL",
        "db"
    ],
    [
        "LOAD_METHOD",
        "db.all_file_paths"
    ],
    [
        "CALL_METHOD",
        "db.all_file_paths()"
    ],
    [
        "STORE_FAST",
        "all_paths"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_ATTR",
        "Call.basic_columns"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.basic_columns"
    ],
    [
        "BINARY_ADD",
        "Call.basic_columns + Function.basic_columns"
    ],
    [
        "CALL_FUNCTION_EX",
        "session.query(*(Call.basic_columns + Function.basic_columns))"
    ],
    [
        "LOAD_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "CALL_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)"
    ],
    [
        "LOAD_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)\n                        .order_by"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_ATTR",
        "Call.start_time"
    ],
    [
        "LOAD_METHOD",
        "Call.start_time.desc"
    ],
    [
        "CALL_METHOD",
        "Call.start_time.desc()"
    ],
    [
        "CALL_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)\n                        .order_by(Call.start_time.desc())"
    ],
    [
        "BINARY_SUBSCR",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)\n                        .order_by(Call.start_time.desc())[:100]"
    ],
    [
        "STORE_FAST",
        "recent_calls"
    ],
    [
        "LOAD_GLOBAL",
        "OrderedDict"
    ],
    [
        "CALL_FUNCTION",
        "OrderedDict()"
    ],
    [
        "STORE_FAST",
        "files"
    ],
    [
        "LOAD_FAST",
        "recent_calls"
    ],
    [
        "STORE_FAST",
        "row"
    ],
    [
        "LOAD_GLOBAL",
        "is_ipython_cell"
    ],
    [
        "LOAD_FAST",
        "row"
    ],
    [
        "LOAD_ATTR",
        "row.file"
    ],
    [
        "CALL_FUNCTION",
        "is_ipython_cell(row.file)"
    ],
    [
        "LOAD_FAST",
        "files"
    ],
    [
        "LOAD_METHOD",
        "files.setdefault"
    ],
    [
        "LOAD_FAST",
        "row"
    ],
    [
        "LOAD_ATTR",
        "row.file"
    ],
    [
        "LOAD_GLOBAL",
        "OrderedDict"
    ],
    [
        "CALL_FUNCTION",
        "OrderedDict()"
    ],
    [
        "CALL_METHOD",
        "files.setdefault(\n            row.file, OrderedDict()\n        )"
    ],
    [
        "LOAD_METHOD",
        "files.setdefault(\n            row.file, OrderedDict()\n        ).setdefault"
    ],
    [
        "LOAD_FAST",
        "row"
    ],
    [
        "LOAD_ATTR",
        "row.name"
    ],
    [
        "LOAD_FAST",
        "row"
    ],
    [
        "CALL_METHOD",
        "files.setdefault(\n            row.file, OrderedDict()\n        ).setdefault(\n            row.name, row\n        )"
    ],
    [
        "LOAD_FAST",
        "all_paths"
    ],
    [
        "STORE_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "files"
    ],
    [
        "LOAD_METHOD",
        "files.setdefault"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "OrderedDict"
    ],
    [
        "CALL_FUNCTION",
        "OrderedDict()"
    ],
    [
        "CALL_METHOD",
        "files.setdefault(\n            path, OrderedDict()\n        )"
    ],
    [
        "LOAD_GLOBAL",
        "partial"
    ],
    [
        "LOAD_GLOBAL",
        "short_path"
    ],
    [
        "LOAD_FAST",
        "all_paths"
    ],
    [
        "CALL_FUNCTION_KW",
        "partial(short_path, all_paths=all_paths)"
    ],
    [
        "STORE_FAST",
        "short"
    ],
    [
        "LOAD_GLOBAL",
        "render_template"
    ],
    [
        "LOAD_FAST",
        "short"
    ],
    [
        "LOAD_FAST",
        "files"
    ],
    [
        "CALL_FUNCTION_KW",
        "render_template('index.html',\n                           short=short,\n                           files=files)"
    ],
    [
        "LOAD_GLOBAL",
        "fix_abs_path"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_FUNCTION",
        "fix_abs_path(path)"
    ],
    [
        "STORE_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_ATTR",
        "Call.basic_columns"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.basic_columns"
    ],
    [
        "BINARY_ADD",
        "Call.basic_columns + Function.basic_columns"
    ],
    [
        "CALL_FUNCTION_EX",
        "session.query(*(Call.basic_columns + Function.basic_columns))"
    ],
    [
        "LOAD_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "CALL_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)"
    ],
    [
        "LOAD_ATTR",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_FUNCTION_KW",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by(file=path)"
    ],
    [
        "LOAD_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by(file=path)\n                      .subquery"
    ],
    [
        "CALL_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by(file=path)\n                      .subquery('filtered_calls')"
    ],
    [
        "STORE_FAST",
        "filtered_calls"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_METHOD",
        "session.query"
    ],
    [
        "LOAD_FAST",
        "filtered_calls"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c.name"
    ],
    [
        "LOAD_GLOBAL",
        "sqlalchemy"
    ],
    [
        "LOAD_ATTR",
        "sqlalchemy.func"
    ],
    [
        "LOAD_METHOD",
        "sqlalchemy.func.max"
    ],
    [
        "LOAD_FAST",
        "filtered_calls"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c.start_time"
    ],
    [
        "CALL_METHOD",
        "sqlalchemy.func.max(filtered_calls.c.start_time)"
    ],
    [
        "LOAD_METHOD",
        "sqlalchemy.func.max(filtered_calls.c.start_time).label"
    ],
    [
        "CALL_METHOD",
        "sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')"
    ],
    [
        "CALL_METHOD",
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    )"
    ],
    [
        "LOAD_METHOD",
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by"
    ],
    [
        "LOAD_FAST",
        "filtered_calls"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c.name"
    ],
    [
        "CALL_METHOD",
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by(\n        filtered_calls.c.name,\n    )"
    ],
    [
        "LOAD_METHOD",
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by(\n        filtered_calls.c.name,\n    ).subquery"
    ],
    [
        "CALL_METHOD",
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by(\n        filtered_calls.c.name,\n    ).subquery('latest_calls')"
    ],
    [
        "STORE_FAST",
        "latest_calls"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_METHOD",
        "session.query"
    ],
    [
        "LOAD_FAST",
        "filtered_calls"
    ],
    [
        "CALL_METHOD",
        "session.query(filtered_calls)"
    ],
    [
        "LOAD_METHOD",
        "session.query(filtered_calls).join"
    ],
    [
        "LOAD_FAST",
        "latest_calls"
    ],
    [
        "LOAD_GLOBAL",
        "sqlalchemy"
    ],
    [
        "LOAD_METHOD",
        "sqlalchemy.and_"
    ],
    [
        "LOAD_FAST",
        "filtered_calls"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c.name"
    ],
    [
        "LOAD_FAST",
        "latest_calls"
    ],
    [
        "LOAD_ATTR",
        "latest_calls.c"
    ],
    [
        "LOAD_ATTR",
        "latest_calls.c.name"
    ],
    [
        "COMPARE_OP",
        "filtered_calls.c.name == latest_calls.c.name"
    ],
    [
        "LOAD_FAST",
        "filtered_calls"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c.start_time"
    ],
    [
        "LOAD_FAST",
        "latest_calls"
    ],
    [
        "LOAD_ATTR",
        "latest_calls.c"
    ],
    [
        "LOAD_ATTR",
        "latest_calls.c.maxtime"
    ],
    [
        "COMPARE_OP",
        "filtered_calls.c.start_time == latest_calls.c.maxtime"
    ],
    [
        "CALL_METHOD",
        "sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )"
    ],
    [
        "CALL_METHOD",
        "session.query(filtered_calls).join(\n        latest_calls,\n        sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )\n    )"
    ],
    [
        "LOAD_METHOD",
        "session.query(filtered_calls).join(\n        latest_calls,\n        sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )\n    ).order_by"
    ],
    [
        "LOAD_FAST",
        "filtered_calls"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c"
    ],
    [
        "LOAD_ATTR",
        "filtered_calls.c.start_time"
    ],
    [
        "LOAD_METHOD",
        "filtered_calls.c.start_time.desc"
    ],
    [
        "CALL_METHOD",
        "filtered_calls.c.start_time.desc()"
    ],
    [
        "CALL_METHOD",
        "session.query(filtered_calls).join(\n        latest_calls,\n        sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )\n    ).order_by(filtered_calls.c.start_time.desc())"
    ],
    [
        "STORE_FAST",
        "query"
    ],
    [
        "LOAD_GLOBAL",
        "group_by_attr"
    ],
    [
        "LOAD_FAST",
        "query"
    ],
    [
        "CALL_FUNCTION",
        "group_by_attr(query, 'type')"
    ],
    [
        "STORE_FAST",
        "funcs"
    ],
    [
        "LOAD_GLOBAL",
        "sorted"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_METHOD",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.name"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.type"
    ],
    [
        "CALL_METHOD",
        "session.query(Function.name, Function.type)"
    ],
    [
        "LOAD_ATTR",
        "session.query(Function.name, Function.type)\n                       .filter_by"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_FUNCTION_KW",
        "session.query(Function.name, Function.type)\n                       .filter_by(file=path)"
    ],
    [
        "LOAD_METHOD",
        "session.query(Function.name, Function.type)\n                       .filter_by(file=path)\n                       .distinct"
    ],
    [
        "CALL_METHOD",
        "session.query(Function.name, Function.type)\n                       .filter_by(file=path)\n                       .distinct()"
    ],
    [
        "CALL_FUNCTION",
        "sorted(session.query(Function.name, Function.type)\n                       .filter_by(file=path)\n                       .distinct())"
    ],
    [
        "STORE_FAST",
        "all_funcs"
    ],
    [
        "LOAD_FAST",
        "query"
    ],
    [
        "CALL_FUNCTION",
        "{row.name for row in query}"
    ],
    [
        "STORE_FAST",
        "func_names"
    ],
    [
        "LOAD_FAST",
        "all_funcs"
    ],
    [
        "STORE_FAST",
        "func"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_ATTR",
        "func.name"
    ],
    [
        "LOAD_FAST",
        "func_names"
    ],
    [
        "COMPARE_OP",
        "func.name not in func_names"
    ],
    [
        "LOAD_FAST",
        "funcs"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_ATTR",
        "func.type"
    ],
    [
        "BINARY_SUBSCR",
        "funcs[func.type]"
    ],
    [
        "LOAD_METHOD",
        "funcs[func.type].append"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL_METHOD",
        "funcs[func.type].append(func)"
    ],
    [
        "LOAD_GLOBAL",
        "render_template"
    ],
    [
        "LOAD_FAST",
        "funcs"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "COMPARE_OP",
        "path == IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "basename"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_FUNCTION",
        "basename(path)"
    ],
    [
        "CALL_FUNCTION_KW",
        "render_template('file.html',\n                           funcs=funcs,\n                           is_ipython=path == IPYTHON_FILE_PATH,\n                           full_path=path,\n                           short_path=basename(path))"
    ],
    [
        "LOAD_FAST",
        "{row.name for row in query}"
    ],
    [
        "STORE_FAST",
        "row"
    ],
    [
        "LOAD_FAST",
        "row"
    ],
    [
        "LOAD_ATTR",
        "row.name"
    ],
    [
        "LOAD_GLOBAL",
        "fix_abs_path"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_FUNCTION",
        "fix_abs_path(path)"
    ],
    [
        "STORE_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "get_calls"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "func_name"
    ],
    [
        "CALL_FUNCTION",
        "get_calls(session, path, func_name, 200)"
    ],
    [
        "STORE_FAST",
        "query"
    ],
    [
        "LOAD_FAST",
        "query"
    ],
    [
        "LOAD_FAST",
        "query"
    ],
    [
        "BINARY_SUBSCR",
        "query[0]"
    ],
    [
        "STORE_FAST",
        "func"
    ],
    [
        "LOAD_FAST",
        "query"
    ],
    [
        "CALL_FUNCTION",
        "[withattrs(Call(), **row._asdict()) for row in query]"
    ],
    [
        "STORE_FAST",
        "calls"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_METHOD",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "CALL_METHOD",
        "session.query(Function)"
    ],
    [
        "LOAD_ATTR",
        "session.query(Function).filter_by"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "func_name"
    ],
    [
        "CALL_FUNCTION_KW",
        "session.query(Function).filter_by(file=path, name=func_name)"
    ],
    [
        "BINARY_SUBSCR",
        "session.query(Function).filter_by(file=path, name=func_name)[0]"
    ],
    [
        "STORE_FAST",
        "func"
    ],
    [
        "STORE_FAST",
        "calls"
    ],
    [
        "LOAD_GLOBAL",
        "render_template"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_GLOBAL",
        "basename"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_FUNCTION",
        "basename(path)"
    ],
    [
        "LOAD_FAST",
        "calls"
    ],
    [
        "CALL_FUNCTION_KW",
        "render_template('function.html',\n                           func=func,\n                           short_path=basename(path),\n                           calls=calls)"
    ],
    [
        "LOAD_FAST",
        "[withattrs(Call(), **row._asdict()) for row in query]"
    ],
    [
        "STORE_FAST",
        "row"
    ],
    [
        "LOAD_GLOBAL",
        "withattrs"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "CALL_FUNCTION",
        "Call()"
    ],
    [
        "LOAD_FAST",
        "row"
    ],
    [
        "LOAD_METHOD",
        "row._asdict"
    ],
    [
        "CALL_METHOD",
        "row._asdict()"
    ],
    [
        "CALL_FUNCTION_EX",
        "withattrs(Call(), **row._asdict())"
    ],
    [
        "LOAD_GLOBAL",
        "fix_abs_path"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_FUNCTION",
        "fix_abs_path(path)"
    ],
    [
        "STORE_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "get_calls"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "func_name"
    ],
    [
        "CALL_FUNCTION",
        "get_calls(session, path, func_name, 1)"
    ],
    [
        "BINARY_SUBSCR",
        "get_calls(session, path, func_name, 1)[0]"
    ],
    [
        "STORE_FAST",
        "call"
    ],
    [
        "LOAD_GLOBAL",
        "jsonify"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_ATTR",
        "call.id"
    ],
    [
        "LOAD_GLOBAL",
        "url_for"
    ],
    [
        "LOAD_GLOBAL",
        "call_view"
    ],
    [
        "LOAD_ATTR",
        "call_view.__name__"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_ATTR",
        "call.id"
    ],
    [
        "CALL_FUNCTION_KW",
        "url_for(call_view.__name__,\n                    call_id=call.id)"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n        id=call.id,\n        url=url_for(call_view.__name__,\n                    call_id=call.id),\n    )"
    ],
    [
        "CALL_FUNCTION",
        "jsonify(dict(\n        id=call.id,\n        url=url_for(call_view.__name__,\n                    call_id=call.id),\n    ))"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_ATTR",
        "Call.basic_columns"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.basic_columns"
    ],
    [
        "BINARY_ADD",
        "Call.basic_columns + Function.basic_columns"
    ],
    [
        "CALL_FUNCTION_EX",
        "session.query(*(Call.basic_columns + Function.basic_columns))"
    ],
    [
        "LOAD_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "CALL_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)"
    ],
    [
        "LOAD_ATTR",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "func_name"
    ],
    [
        "CALL_FUNCTION_KW",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)"
    ],
    [
        "LOAD_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)\n                .order_by"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_ATTR",
        "Call.start_time"
    ],
    [
        "LOAD_METHOD",
        "Call.start_time.desc"
    ],
    [
        "CALL_METHOD",
        "Call.start_time.desc()"
    ],
    [
        "CALL_METHOD",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)\n                .order_by(Call.start_time.desc())"
    ],
    [
        "LOAD_FAST",
        "limit"
    ],
    [
        "BINARY_SUBSCR",
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)\n                .order_by(Call.start_time.desc())[:limit]"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_METHOD",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "CALL_METHOD",
        "session.query(Call)"
    ],
    [
        "LOAD_ATTR",
        "session.query(Call).filter_by"
    ],
    [
        "LOAD_FAST",
        "call_id"
    ],
    [
        "CALL_FUNCTION_KW",
        "session.query(Call).filter_by(id=call_id)"
    ],
    [
        "LOAD_METHOD",
        "session.query(Call).filter_by(id=call_id).one"
    ],
    [
        "CALL_METHOD",
        "session.query(Call).filter_by(id=call_id).one()"
    ],
    [
        "STORE_FAST",
        "call"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_ATTR",
        "call.function"
    ],
    [
        "STORE_FAST",
        "func"
    ],
    [
        "LOAD_GLOBAL",
        "render_template"
    ],
    [
        "LOAD_FAST",
        "template"
    ],
    [
        "LOAD_GLOBAL",
        "basename"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_ATTR",
        "func.file"
    ],
    [
        "CALL_FUNCTION",
        "basename(func.file)"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL_FUNCTION_KW",
        "render_template(template,\n                           short_path=basename(func.file),\n                           call=call,\n                           func=func)"
    ],
    [
        "LOAD_GLOBAL",
        "base_call_view"
    ],
    [
        "LOAD_FAST",
        "call_id"
    ],
    [
        "CALL_FUNCTION",
        "base_call_view(call_id, 'call.html')"
    ],
    [
        "LOAD_GLOBAL",
        "base_call_view"
    ],
    [
        "LOAD_FAST",
        "call_id"
    ],
    [
        "CALL_FUNCTION",
        "base_call_view(call_id, 'ipython_call.html')"
    ],
    [
        "LOAD_GLOBAL",
        "render_template"
    ],
    [
        "LOAD_FAST",
        "call_id"
    ],
    [
        "CALL_FUNCTION_KW",
        "render_template('ipython_iframe.html',\n                           container_id='1234',\n                           port=7777,\n                           call_id=call_id)"
    ],
    [
        "LOAD_GLOBAL",
        "request"
    ],
    [
        "LOAD_ATTR",
        "request.environ"
    ],
    [
        "LOAD_METHOD",
        "request.environ.get"
    ],
    [
        "CALL_METHOD",
        "request.environ.get('werkzeug.server.shutdown')"
    ],
    [
        "STORE_FAST",
        "func"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "COMPARE_OP",
        "func is None"
    ],
    [
        "LOAD_GLOBAL",
        "RuntimeError"
    ],
    [
        "CALL_FUNCTION",
        "RuntimeError('Not running with the Werkzeug Server')"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL_FUNCTION",
        "func()"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_METHOD",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "CALL_METHOD",
        "session.query(Call)"
    ],
    [
        "LOAD_ATTR",
        "session.query(Call).filter_by"
    ],
    [
        "LOAD_FAST",
        "call_id"
    ],
    [
        "CALL_FUNCTION_KW",
        "session.query(Call).filter_by(id=call_id)"
    ],
    [
        "LOAD_METHOD",
        "session.query(Call).filter_by(id=call_id).one"
    ],
    [
        "CALL_METHOD",
        "session.query(Call).filter_by(id=call_id).one()"
    ],
    [
        "STORE_FAST",
        "call"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_ATTR",
        "call.function"
    ],
    [
        "STORE_FAST",
        "func"
    ],
    [
        "LOAD_GLOBAL",
        "DecentJSONEncoder"
    ],
    [
        "CALL_FUNCTION",
        "DecentJSONEncoder()"
    ],
    [
        "LOAD_METHOD",
        "DecentJSONEncoder().encode"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_ATTR",
        "call.parsed_data"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_METHOD",
        "Call.basic_dict"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "CALL_METHOD",
        "Call.basic_dict(call)"
    ],
    [
        "CALL_FUNCTION_EX",
        "dict(data=call.parsed_data, **Call.basic_dict(call))"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_ATTR",
        "func.parsed_data"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_METHOD",
        "Function.basic_dict"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL_METHOD",
        "Function.basic_dict(func)"
    ],
    [
        "CALL_FUNCTION_EX",
        "dict(data=func.parsed_data, **Function.basic_dict(func))"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n        call=dict(data=call.parsed_data, **Call.basic_dict(call)),\n        function=dict(data=func.parsed_data, **Function.basic_dict(func)))"
    ],
    [
        "CALL_METHOD",
        "DecentJSONEncoder().encode(dict(\n        call=dict(data=call.parsed_data, **Call.basic_dict(call)),\n        function=dict(data=func.parsed_data, **Function.basic_dict(func))))"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_ATTR",
        "Call.basic_columns"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.data"
    ],
    [
        "BINARY_ADD",
        "Call.basic_columns + (Function.data,)"
    ],
    [
        "CALL_FUNCTION_EX",
        "session.query(*Call.basic_columns + (Function.data,))"
    ],
    [
        "LOAD_METHOD",
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "CALL_METHOD",
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)"
    ],
    [
        "LOAD_ATTR",
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by"
    ],
    [
        "LOAD_FAST",
        "body_hash"
    ],
    [
        "CALL_FUNCTION_KW",
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)"
    ],
    [
        "LOAD_METHOD",
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)\n                 .order_by"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_ATTR",
        "Call.start_time"
    ],
    [
        "LOAD_METHOD",
        "Call.start_time.desc"
    ],
    [
        "CALL_METHOD",
        "Call.start_time.desc()"
    ],
    [
        "CALL_METHOD",
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)\n                 .order_by(Call.start_time.desc())"
    ],
    [
        "BINARY_SUBSCR",
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)\n                 .order_by(Call.start_time.desc())[:200]"
    ],
    [
        "STORE_FAST",
        "query"
    ],
    [
        "LOAD_FAST",
        "query"
    ],
    [
        "CALL_FUNCTION",
        "[Call.basic_dict(withattrs(Call(), **row._asdict()))\n             for row in query]"
    ],
    [
        "STORE_FAST",
        "calls"
    ],
    [
        "LOAD_FAST",
        "query"
    ],
    [
        "CALL_FUNCTION",
        "{row.data for row in query}"
    ],
    [
        "STORE_FAST",
        "function_data_set"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "STORE_FAST",
        "ranges"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "STORE_FAST",
        "loop_ranges"
    ],
    [
        "LOAD_FAST",
        "function_data_set"
    ],
    [
        "STORE_DEREF",
        "function_data"
    ],
    [
        "LOAD_GLOBAL",
        "json"
    ],
    [
        "LOAD_METHOD",
        "json.loads"
    ],
    [
        "LOAD_DEREF",
        "function_data"
    ],
    [
        "CALL_METHOD",
        "json.loads(function_data)"
    ],
    [
        "STORE_DEREF",
        "function_data"
    ],
    [
        "STORE_FAST",
        "        def add(key, ranges_set):\n            for node in function_data[key]:\n                ranges_set.add((node['start'], node['end']))"
    ],
    [
        "LOAD_FAST",
        "add"
    ],
    [
        "LOAD_FAST",
        "ranges"
    ],
    [
        "CALL_FUNCTION",
        "add('node_ranges', ranges)"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "STORE_FAST",
        "current_loop_ranges"
    ],
    [
        "LOAD_FAST",
        "add"
    ],
    [
        "LOAD_FAST",
        "current_loop_ranges"
    ],
    [
        "CALL_FUNCTION",
        "add('loop_ranges', current_loop_ranges)"
    ],
    [
        "LOAD_FAST",
        "loop_ranges"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "LOAD_FAST",
        "current_loop_ranges"
    ],
    [
        "COMPARE_OP",
        "loop_ranges in (set(), current_loop_ranges)"
    ],
    [
        "LOAD_FAST",
        "current_loop_ranges"
    ],
    [
        "STORE_FAST",
        "loop_ranges"
    ],
    [
        "LOAD_FAST",
        "ranges"
    ],
    [
        "CALL_FUNCTION",
        "[dict(start=start, end=end) for start, end in ranges]"
    ],
    [
        "STORE_FAST",
        "ranges"
    ],
    [
        "LOAD_FAST",
        "loop_ranges"
    ],
    [
        "CALL_FUNCTION",
        "[dict(start=start, end=end) for start, end in loop_ranges]"
    ],
    [
        "STORE_FAST",
        "loop_ranges"
    ],
    [
        "LOAD_GLOBAL",
        "DecentJSONEncoder"
    ],
    [
        "CALL_FUNCTION",
        "DecentJSONEncoder()"
    ],
    [
        "LOAD_METHOD",
        "DecentJSONEncoder().encode"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "calls"
    ],
    [
        "LOAD_FAST",
        "ranges"
    ],
    [
        "LOAD_FAST",
        "loop_ranges"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n        calls=calls, ranges=ranges, loop_ranges=loop_ranges)"
    ],
    [
        "CALL_METHOD",
        "DecentJSONEncoder().encode(dict(\n        calls=calls, ranges=ranges, loop_ranges=loop_ranges))"
    ],
    [
        "LOAD_FAST",
        "[Call.basic_dict(withattrs(Call(), **row._asdict()))\n             for row in query]"
    ],
    [
        "STORE_FAST",
        "row"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_METHOD",
        "Call.basic_dict"
    ],
    [
        "LOAD_GLOBAL",
        "withattrs"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "CALL_FUNCTION",
        "Call()"
    ],
    [
        "LOAD_FAST",
        "row"
    ],
    [
        "LOAD_METHOD",
        "row._asdict"
    ],
    [
        "CALL_METHOD",
        "row._asdict()"
    ],
    [
        "CALL_FUNCTION_EX",
        "withattrs(Call(), **row._asdict())"
    ],
    [
        "CALL_METHOD",
        "Call.basic_dict(withattrs(Call(), **row._asdict()))"
    ],
    [
        "LOAD_FAST",
        "{row.data for row in query}"
    ],
    [
        "STORE_FAST",
        "row"
    ],
    [
        "LOAD_FAST",
        "row"
    ],
    [
        "LOAD_ATTR",
        "row.data"
    ],
    [
        "LOAD_DEREF",
        "function_data"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "function_data[key]"
    ],
    [
        "STORE_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "ranges_set"
    ],
    [
        "LOAD_METHOD",
        "ranges_set.add"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "BINARY_SUBSCR",
        "node['start']"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "BINARY_SUBSCR",
        "node['end']"
    ],
    [
        "CALL_METHOD",
        "ranges_set.add((node['start'], node['end']))"
    ],
    [
        "LOAD_FAST",
        "[dict(start=start, end=end) for start, end in ranges]"
    ],
    [
        "STORE_FAST",
        "start"
    ],
    [
        "STORE_FAST",
        "end"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(start=start, end=end)"
    ],
    [
        "LOAD_FAST",
        "[dict(start=start, end=end) for start, end in loop_ranges]"
    ],
    [
        "STORE_FAST",
        "start"
    ],
    [
        "STORE_FAST",
        "end"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(start=start, end=end)"
    ],
    [
        "LOAD_GLOBAL",
        "request"
    ],
    [
        "LOAD_METHOD",
        "request.get_json"
    ],
    [
        "CALL_METHOD",
        "request.get_json()"
    ],
    [
        "STORE_FAST",
        "hashes"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_METHOD",
        "session.query"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.body_hash"
    ],
    [
        "LOAD_GLOBAL",
        "sqlalchemy"
    ],
    [
        "LOAD_ATTR",
        "sqlalchemy.func"
    ],
    [
        "LOAD_METHOD",
        "sqlalchemy.func.count"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "LOAD_ATTR",
        "Call.id"
    ],
    [
        "CALL_METHOD",
        "sqlalchemy.func.count(Call.id)"
    ],
    [
        "CALL_METHOD",
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))"
    ],
    [
        "LOAD_METHOD",
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin"
    ],
    [
        "LOAD_GLOBAL",
        "Call"
    ],
    [
        "CALL_METHOD",
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)"
    ],
    [
        "LOAD_METHOD",
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.body_hash"
    ],
    [
        "LOAD_METHOD",
        "Function.body_hash.in_"
    ],
    [
        "LOAD_FAST",
        "hashes"
    ],
    [
        "CALL_METHOD",
        "Function.body_hash.in_(hashes)"
    ],
    [
        "CALL_METHOD",
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter(Function.body_hash.in_(hashes))"
    ],
    [
        "LOAD_METHOD",
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter(Function.body_hash.in_(hashes))\n             .group_by"
    ],
    [
        "LOAD_GLOBAL",
        "Function"
    ],
    [
        "LOAD_ATTR",
        "Function.body_hash"
    ],
    [
        "CALL_METHOD",
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter(Function.body_hash.in_(hashes))\n             .group_by(Function.body_hash)"
    ],
    [
        "STORE_FAST",
        "query"
    ],
    [
        "LOAD_GLOBAL",
        "DecentJSONEncoder"
    ],
    [
        "CALL_FUNCTION",
        "DecentJSONEncoder()"
    ],
    [
        "LOAD_METHOD",
        "DecentJSONEncoder().encode"
    ],
    [
        "LOAD_FAST",
        "query"
    ],
    [
        "CALL_FUNCTION",
        "[\n        dict(hash=h, count=count)\n        for h, count in query\n    ]"
    ],
    [
        "CALL_METHOD",
        "DecentJSONEncoder().encode([\n        dict(hash=h, count=count)\n        for h, count in query\n    ])"
    ],
    [
        "LOAD_FAST",
        "[\n        dict(hash=h, count=count)\n        for h, count in query\n    ]"
    ],
    [
        "STORE_FAST",
        "h"
    ],
    [
        "STORE_FAST",
        "count"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "count"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(hash=h, count=count)"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "argv"
    ],
    [
        "CALL_FUNCTION",
        "len(argv)"
    ],
    [
        "COMPARE_OP",
        "len(argv) == 1"
    ],
    [
        "LOAD_FAST",
        "argv"
    ],
    [
        "BINARY_SUBSCR",
        "argv[0]"
    ],
    [
        "LOAD_METHOD",
        "argv[0].isdigit"
    ],
    [
        "CALL_METHOD",
        "argv[0].isdigit()"
    ],
    [
        "LOAD_FAST",
        "argv"
    ],
    [
        "LOAD_METHOD",
        "argv.insert"
    ],
    [
        "CALL_METHOD",
        "argv.insert(0, '--port')"
    ],
    [
        "LOAD_GLOBAL",
        "argparse"
    ],
    [
        "LOAD_ATTR",
        "argparse.ArgumentParser"
    ],
    [
        "CALL_FUNCTION_KW",
        "argparse.ArgumentParser(description=\"Bird's Eye: A graphical Python debugger\")"
    ],
    [
        "STORE_FAST",
        "parser"
    ],
    [
        "LOAD_FAST",
        "parser"
    ],
    [
        "LOAD_ATTR",
        "parser.add_argument"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION_KW",
        "parser.add_argument('-p', '--port', help='HTTP port, default is 7777', default=7777, type=int)"
    ],
    [
        "LOAD_FAST",
        "parser"
    ],
    [
        "LOAD_ATTR",
        "parser.add_argument"
    ],
    [
        "CALL_FUNCTION_KW",
        "parser.add_argument('--host', help=\"HTTP host, default is 'localhost'\", default='localhost')"
    ],
    [
        "LOAD_FAST",
        "parser"
    ],
    [
        "LOAD_METHOD",
        "parser.parse_args"
    ],
    [
        "LOAD_FAST",
        "argv"
    ],
    [
        "CALL_METHOD",
        "parser.parse_args(argv)"
    ],
    [
        "STORE_FAST",
        "args"
    ],
    [
        "LOAD_GLOBAL",
        "app"
    ],
    [
        "LOAD_ATTR",
        "app.run"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_ATTR",
        "args.port"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_ATTR",
        "args.host"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.environ"
    ],
    [
        "LOAD_METHOD",
        "os.environ.get"
    ],
    [
        "CALL_METHOD",
        "os.environ.get('BIRDSEYE_RELOADER')"
    ],
    [
        "COMPARE_OP",
        "os.environ.get('BIRDSEYE_RELOADER') == '1'"
    ],
    [
        "CALL_FUNCTION_KW",
        "app.run(\n        port=args.port,\n        host=args.host,\n        use_reloader=os.environ.get('BIRDSEYE_RELOADER') == '1',\n    )"
    ]
]