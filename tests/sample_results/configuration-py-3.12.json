[
    [
        "STORE_NAME",
        "import inspect"
    ],
    [
        "STORE_NAME",
        "import os"
    ],
    [
        "STORE_NAME",
        "import sys"
    ],
    [
        "STORE_NAME",
        "import threading"
    ],
    [
        "STORE_NAME",
        "from collections import Set, Mapping, Sequence"
    ],
    [
        "STORE_NAME",
        "from collections import Set, Mapping, Sequence"
    ],
    [
        "STORE_NAME",
        "from collections import Set, Mapping, Sequence"
    ],
    [
        "STORE_NAME",
        "from io import open"
    ],
    [
        "STORE_NAME",
        "import six"
    ],
    [
        "STORE_NAME",
        "import snoop as package"
    ],
    [
        "STORE_NAME",
        "from snoop.formatting import DefaultFormatter"
    ],
    [
        "STORE_NAME",
        "from snoop.pp_module import PP"
    ],
    [
        "STORE_NAME",
        "from snoop.tracer import Spy, Tracer"
    ],
    [
        "STORE_NAME",
        "from snoop.tracer import Spy, Tracer"
    ],
    [
        "STORE_NAME",
        "from snoop.utils import builtins as builtins_module, is_pathlike, shitcode, ensure_tuple, QuerySet"
    ],
    [
        "STORE_NAME",
        "from snoop.utils import builtins as builtins_module, is_pathlike, shitcode, ensure_tuple, QuerySet"
    ],
    [
        "STORE_NAME",
        "from snoop.utils import builtins as builtins_module, is_pathlike, shitcode, ensure_tuple, QuerySet"
    ],
    [
        "STORE_NAME",
        "from snoop.utils import builtins as builtins_module, is_pathlike, shitcode, ensure_tuple, QuerySet"
    ],
    [
        "STORE_NAME",
        "from snoop.utils import builtins as builtins_module, is_pathlike, shitcode, ensure_tuple, QuerySet"
    ],
    [
        "STORE_NAME",
        "import ctypes"
    ],
    [
        "LOAD_NAME",
        "ctypes"
    ],
    [
        "LOAD_ATTR",
        "ctypes.windll"
    ],
    [
        "LOAD_ATTR",
        "ctypes.windll.kernel32"
    ],
    [
        "STORE_NAME",
        "kernel32"
    ],
    [
        "LOAD_NAME",
        "kernel32"
    ],
    [
        "LOAD_ATTR",
        "kernel32.SetConsoleMode"
    ],
    [
        "LOAD_NAME",
        "kernel32"
    ],
    [
        "LOAD_ATTR",
        "kernel32.GetStdHandle"
    ],
    [
        "CALL",
        "kernel32.GetStdHandle(-11)"
    ],
    [
        "CALL",
        "kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)"
    ],
    [
        "STORE_NAME",
        "can_color"
    ],
    [
        "LOAD_NAME",
        "DefaultFormatter"
    ],
    [
        "STORE_NAME",
        "def install(\n        builtins=True,\n        snoop=\"snoop\",\n        pp=\"pp\",\n        spy=\"spy\",\n        out=None,\n        prefix='',\n        columns='time',\n        overwrite=False,\n        color=None,\n        enabled=True,\n        watch_extras=(),\n        replace_watch_extras=None,\n        formatter_class=DefaultFormatter,\n):\n    \"\"\"\n    Configure output, enable or disable, and add names to builtins. Parameters:\n    \n    - builtins: set to False to not add any names to builtins,\n        so importing will still be required.\n    - snoop, pp, and spy: set to other strings \n        to choose the names of these functions in builtins\n    - `out`: determines the output destination. By default this is stderr. You can also pass:\n        - A string or a `Path` object to write to a file at that location. By default this always will append to the file. Pass `overwrite=True` to clear the file initially.\n        - Anything with a `write` method, e.g. `sys.stdout` or a file object.\n        - Any callable with a single string argument, e.g. `logger.info`.\n    - `color`: determines whether the output includes escape characters to display colored text in the console. If you see weird characters in your output, your console doesn't support colors, so pass `color=False`.\n        - Code is syntax highlighted using [Pygments](http://pygments.org/), and this argument is passed as the style. You can choose a different color scheme by passing a string naming a style (see [this gallery](https://help.farbox.com/pygments.html)) or a style class. The default style is monokai.   \n        - By default this parameter is set to `out.isatty()`, which is usually true for stdout and stderr but will be false if they are redirected or piped. Pass `True` or a style if you want to force coloring.\n        - To see colors in the PyCharm Run window, edit the Run Configuration and tick \"Emulate terminal in output console\".\n    - `prefix`: Pass a string to start all snoop lines with that string so you can grep for them easily.\n    - `columns`: This specifies the columns at the start of each output line. You can pass a string with the names of built in columns separated by spaces or commas. These are the available columns:\n        - `time`: The current time. This is the only column by default.\n        - `thread`: The name of the current thread.  \n        - `thread_ident`: The [identifier](https://docs.python.org/3/library/threading.html#threading.Thread.ident) of the current thread, in case thread names are not unique.\n        - `file`: The filename (not the full path) of the current function.\n        - `full_file`: The full path to the file (also shown anyway when the function is called).\n        - `function`: The name of the current function.\n        - `function_qualname`: The qualified name of the current function.\n        \n        If you want a custom column, please open an issue to tell me what you're interested in! In the meantime, you can pass a list, where the elements are either strings or callables. The callables should take one argument, which will be an `Event` object. It has attributes `frame`, `event`, and `arg`, as specified in [`sys.settrace()`](https://docs.python.org/3/library/sys.html#sys.settrace), and other attributes which may change. \n    \"\"\"\n    \n    if builtins:\n        setattr(builtins_module, snoop, package.snoop)\n        setattr(builtins_module, pp, package.pp)\n        setattr(builtins_module, spy, package.spy)\n    config = Config(\n        out=out,\n        prefix=prefix,\n        columns=columns,\n        overwrite=overwrite,\n        color=color,\n        enabled=enabled,\n        watch_extras=watch_extras,\n        replace_watch_extras=replace_watch_extras,\n        formatter_class=formatter_class,\n    )\n    package.snoop.config = config\n    package.pp.config = config\n    package.spy.config = config"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "CALL",
        "class Config(object):\n    \"\"\"\"\n    If you need more control than the global `install` function, e.g. if you want to write to several different files in one process, you can create a `Config` object, e.g: `config = snoop.Config(out=filename)`. Then `config.snoop`, `config.pp` and `config.spy` will use that configuration rather than the global one.\n    \n    The arguments are the same as the arguments of `install()` relating to output configuration and `enabled`.\n    \"\"\"\n    \n    def __init__(\n            self,\n            out=None,\n            prefix='',\n            columns='time',\n            overwrite=False,\n            color=None,\n            enabled=True,\n            watch_extras=(),\n            replace_watch_extras=None,\n            formatter_class=DefaultFormatter,\n    ):\n        if can_color:\n            if color is None:\n                isatty = getattr(out or sys.stderr, 'isatty', lambda: False)\n                color = bool(isatty())\n        else:\n            color = False\n\n        self.write = get_write_function(out, overwrite)\n        self.formatter = formatter_class(prefix, columns, color)\n        self.enabled = enabled\n        self.pp = PP(self)\n\n        class ConfiguredTracer(Tracer):\n            config = self\n\n        self.snoop = ConfiguredTracer\n        self.spy = Spy(self)\n\n        self.last_frame = None\n        self.thread_local = threading.local()\n\n        if replace_watch_extras is not None:\n            self.watch_extras = ensure_tuple(replace_watch_extras)\n        else:\n            self.watch_extras = (len_shape_watch, dtype_watch) + ensure_tuple(watch_extras)"
    ],
    [
        "STORE_NAME",
        "class Config(object):\n    \"\"\"\"\n    If you need more control than the global `install` function, e.g. if you want to write to several different files in one process, you can create a `Config` object, e.g: `config = snoop.Config(out=filename)`. Then `config.snoop`, `config.pp` and `config.spy` will use that configuration rather than the global one.\n    \n    The arguments are the same as the arguments of `install()` relating to output configuration and `enabled`.\n    \"\"\"\n    \n    def __init__(\n            self,\n            out=None,\n            prefix='',\n            columns='time',\n            overwrite=False,\n            color=None,\n            enabled=True,\n            watch_extras=(),\n            replace_watch_extras=None,\n            formatter_class=DefaultFormatter,\n    ):\n        if can_color:\n            if color is None:\n                isatty = getattr(out or sys.stderr, 'isatty', lambda: False)\n                color = bool(isatty())\n        else:\n            color = False\n\n        self.write = get_write_function(out, overwrite)\n        self.formatter = formatter_class(prefix, columns, color)\n        self.enabled = enabled\n        self.pp = PP(self)\n\n        class ConfiguredTracer(Tracer):\n            config = self\n\n        self.snoop = ConfiguredTracer\n        self.spy = Spy(self)\n\n        self.last_frame = None\n        self.thread_local = threading.local()\n\n        if replace_watch_extras is not None:\n            self.watch_extras = ensure_tuple(replace_watch_extras)\n        else:\n            self.watch_extras = (len_shape_watch, dtype_watch) + ensure_tuple(watch_extras)"
    ],
    [
        "STORE_NAME",
        "def len_shape_watch(source, value):\n    try:\n        shape = value.shape\n    except Exception:\n        pass\n    else:\n        if not inspect.ismethod(shape):\n            return '{}.shape'.format(source), shape\n\n    if isinstance(value, QuerySet):\n        # Getting the length of a Django queryset evaluates it\n        return None\n\n    length = len(value)\n    if (\n            (isinstance(value, six.string_types)\n             and length < 50) or\n            (isinstance(value, (Mapping, Set, Sequence))\n             and length == 0)\n    ):\n        return None\n\n    return 'len({})'.format(source), length"
    ],
    [
        "STORE_NAME",
        "def dtype_watch(source, value):\n    dtype = value.dtype\n    if not inspect.ismethod(dtype):\n        return '{}.dtype'.format(source), dtype"
    ],
    [
        "STORE_NAME",
        "def get_write_function(output, overwrite):\n    is_path = (\n        isinstance(output, six.string_types)\n        or is_pathlike(output)\n    )\n    if is_path:\n        return FileWriter(output, overwrite).write\n    elif callable(output):\n        write = output\n    else:\n        def write(s):\n            stream = output\n\n            if stream is None:\n                stream = sys.stderr\n\n            try:\n                stream.write(s)\n            except UnicodeEncodeError:\n                # God damn Python 2\n                stream.write(shitcode(s))\n    return write"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "CALL",
        "class FileWriter(object):\n    def __init__(self, path, overwrite):\n        self.path = six.text_type(path)\n        self.overwrite = overwrite\n\n    def write(self, s):\n        with open(self.path, 'w' if self.overwrite else 'a', encoding='utf-8') as f:\n            f.write(s)\n        self.overwrite = False"
    ],
    [
        "STORE_NAME",
        "class FileWriter(object):\n    def __init__(self, path, overwrite):\n        self.path = six.text_type(path)\n        self.overwrite = overwrite\n\n    def write(self, s):\n        with open(self.path, 'w' if self.overwrite else 'a', encoding='utf-8') as f:\n            f.write(s)\n        self.overwrite = False"
    ],
    [
        "LOAD_NAME",
        "Exception"
    ],
    [
        "LOAD_NAME",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.name"
    ],
    [
        "COMPARE_OP",
        "os.name != 'nt'"
    ],
    [
        "STORE_NAME",
        "can_color"
    ],
    [
        "LOAD_FAST",
        "builtins"
    ],
    [
        "LOAD_GLOBAL",
        "setattr"
    ],
    [
        "LOAD_GLOBAL",
        "builtins_module"
    ],
    [
        "LOAD_FAST",
        "snoop"
    ],
    [
        "LOAD_GLOBAL",
        "package"
    ],
    [
        "LOAD_ATTR",
        "package.snoop"
    ],
    [
        "CALL",
        "setattr(builtins_module, snoop, package.snoop)"
    ],
    [
        "LOAD_GLOBAL",
        "setattr"
    ],
    [
        "LOAD_GLOBAL",
        "builtins_module"
    ],
    [
        "LOAD_FAST",
        "pp"
    ],
    [
        "LOAD_GLOBAL",
        "package"
    ],
    [
        "LOAD_ATTR",
        "package.pp"
    ],
    [
        "CALL",
        "setattr(builtins_module, pp, package.pp)"
    ],
    [
        "LOAD_GLOBAL",
        "setattr"
    ],
    [
        "LOAD_GLOBAL",
        "builtins_module"
    ],
    [
        "LOAD_FAST",
        "spy"
    ],
    [
        "LOAD_GLOBAL",
        "package"
    ],
    [
        "LOAD_ATTR",
        "package.spy"
    ],
    [
        "CALL",
        "setattr(builtins_module, spy, package.spy)"
    ],
    [
        "LOAD_GLOBAL",
        "Config"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "LOAD_FAST",
        "columns"
    ],
    [
        "LOAD_FAST",
        "overwrite"
    ],
    [
        "LOAD_FAST",
        "color"
    ],
    [
        "LOAD_FAST",
        "enabled"
    ],
    [
        "LOAD_FAST",
        "watch_extras"
    ],
    [
        "LOAD_FAST",
        "replace_watch_extras"
    ],
    [
        "LOAD_FAST",
        "formatter_class"
    ],
    [
        "CALL",
        "Config(\n        out=out,\n        prefix=prefix,\n        columns=columns,\n        overwrite=overwrite,\n        color=color,\n        enabled=enabled,\n        watch_extras=watch_extras,\n        replace_watch_extras=replace_watch_extras,\n        formatter_class=formatter_class,\n    )"
    ],
    [
        "STORE_FAST",
        "config"
    ],
    [
        "LOAD_FAST",
        "config"
    ],
    [
        "LOAD_GLOBAL",
        "package"
    ],
    [
        "LOAD_ATTR",
        "package.snoop"
    ],
    [
        "STORE_ATTR",
        "package.snoop.config"
    ],
    [
        "LOAD_FAST",
        "config"
    ],
    [
        "LOAD_GLOBAL",
        "package"
    ],
    [
        "LOAD_ATTR",
        "package.pp"
    ],
    [
        "STORE_ATTR",
        "package.pp.config"
    ],
    [
        "LOAD_FAST",
        "config"
    ],
    [
        "LOAD_GLOBAL",
        "package"
    ],
    [
        "LOAD_ATTR",
        "package.spy"
    ],
    [
        "STORE_ATTR",
        "package.spy.config"
    ],
    [
        "STORE_NAME",
        "\"\"\"\"\n    If you need more control than the global `install` function, e.g. if you want to write to several different files in one process, you can create a `Config` object, e.g: `config = snoop.Config(out=filename)`. Then `config.snoop`, `config.pp` and `config.spy` will use that configuration rather than the global one.\n    \n    The arguments are the same as the arguments of `install()` relating to output configuration and `enabled`.\n    \"\"\""
    ],
    [
        "LOAD_NAME",
        "DefaultFormatter"
    ],
    [
        "STORE_NAME",
        "    def __init__(\n            self,\n            out=None,\n            prefix='',\n            columns='time',\n            overwrite=False,\n            color=None,\n            enabled=True,\n            watch_extras=(),\n            replace_watch_extras=None,\n            formatter_class=DefaultFormatter,\n    ):\n        if can_color:\n            if color is None:\n                isatty = getattr(out or sys.stderr, 'isatty', lambda: False)\n                color = bool(isatty())\n        else:\n            color = False\n\n        self.write = get_write_function(out, overwrite)\n        self.formatter = formatter_class(prefix, columns, color)\n        self.enabled = enabled\n        self.pp = PP(self)\n\n        class ConfiguredTracer(Tracer):\n            config = self\n\n        self.snoop = ConfiguredTracer\n        self.spy = Spy(self)\n\n        self.last_frame = None\n        self.thread_local = threading.local()\n\n        if replace_watch_extras is not None:\n            self.watch_extras = ensure_tuple(replace_watch_extras)\n        else:\n            self.watch_extras = (len_shape_watch, dtype_watch) + ensure_tuple(watch_extras)"
    ],
    [
        "LOAD_GLOBAL",
        "can_color"
    ],
    [
        "LOAD_FAST",
        "color"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_GLOBAL",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.stderr"
    ],
    [
        "CALL",
        "getattr(out or sys.stderr, 'isatty', lambda: False)"
    ],
    [
        "STORE_FAST",
        "isatty"
    ],
    [
        "LOAD_GLOBAL",
        "bool"
    ],
    [
        "LOAD_FAST",
        "isatty"
    ],
    [
        "CALL",
        "isatty()"
    ],
    [
        "CALL",
        "bool(isatty())"
    ],
    [
        "STORE_FAST",
        "color"
    ],
    [
        "STORE_FAST",
        "color"
    ],
    [
        "LOAD_GLOBAL",
        "get_write_function"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_FAST",
        "overwrite"
    ],
    [
        "CALL",
        "get_write_function(out, overwrite)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.write"
    ],
    [
        "LOAD_FAST",
        "formatter_class"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "LOAD_FAST",
        "columns"
    ],
    [
        "LOAD_FAST",
        "color"
    ],
    [
        "CALL",
        "formatter_class(prefix, columns, color)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.formatter"
    ],
    [
        "LOAD_FAST",
        "enabled"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.enabled"
    ],
    [
        "LOAD_GLOBAL",
        "PP"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "CALL",
        "PP(self)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.pp"
    ],
    [
        "LOAD_GLOBAL",
        "Tracer"
    ],
    [
        "CALL",
        "        class ConfiguredTracer(Tracer):\n            config = self"
    ],
    [
        "STORE_FAST",
        "        class ConfiguredTracer(Tracer):\n            config = self"
    ],
    [
        "LOAD_FAST",
        "ConfiguredTracer"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.snoop"
    ],
    [
        "LOAD_GLOBAL",
        "Spy"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "CALL",
        "Spy(self)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.spy"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.last_frame"
    ],
    [
        "LOAD_GLOBAL",
        "threading"
    ],
    [
        "LOAD_ATTR",
        "threading.local"
    ],
    [
        "CALL",
        "threading.local()"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.thread_local"
    ],
    [
        "LOAD_FAST",
        "replace_watch_extras"
    ],
    [
        "LOAD_GLOBAL",
        "ensure_tuple"
    ],
    [
        "LOAD_FAST",
        "replace_watch_extras"
    ],
    [
        "CALL",
        "ensure_tuple(replace_watch_extras)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.watch_extras"
    ],
    [
        "LOAD_GLOBAL",
        "len_shape_watch"
    ],
    [
        "LOAD_GLOBAL",
        "dtype_watch"
    ],
    [
        "LOAD_GLOBAL",
        "ensure_tuple"
    ],
    [
        "LOAD_FAST",
        "watch_extras"
    ],
    [
        "CALL",
        "ensure_tuple(watch_extras)"
    ],
    [
        "BINARY_OP",
        "(len_shape_watch, dtype_watch) + ensure_tuple(watch_extras)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.watch_extras"
    ],
    [
        "LOAD_FROM_DICT_OR_DEREF",
        "self"
    ],
    [
        "STORE_NAME",
        "config"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_ATTR",
        "value.shape"
    ],
    [
        "STORE_FAST",
        "shape"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.ismethod"
    ],
    [
        "LOAD_FAST",
        "shape"
    ],
    [
        "CALL",
        "inspect.ismethod(shape)"
    ],
    [
        "LOAD_ATTR",
        "'{}.shape'.format"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL",
        "'{}.shape'.format(source)"
    ],
    [
        "LOAD_FAST",
        "shape"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_GLOBAL",
        "QuerySet"
    ],
    [
        "CALL",
        "isinstance(value, QuerySet)"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "CALL",
        "len(value)"
    ],
    [
        "STORE_FAST",
        "length"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_GLOBAL",
        "six"
    ],
    [
        "LOAD_ATTR",
        "six.string_types"
    ],
    [
        "CALL",
        "isinstance(value, six.string_types)"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "COMPARE_OP",
        "length < 50"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_GLOBAL",
        "Mapping"
    ],
    [
        "LOAD_GLOBAL",
        "Set"
    ],
    [
        "LOAD_GLOBAL",
        "Sequence"
    ],
    [
        "CALL",
        "isinstance(value, (Mapping, Set, Sequence))"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "COMPARE_OP",
        "length == 0"
    ],
    [
        "LOAD_ATTR",
        "'len({})'.format"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL",
        "'len({})'.format(source)"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "LOAD_GLOBAL",
        "Exception"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_ATTR",
        "value.dtype"
    ],
    [
        "STORE_FAST",
        "dtype"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.ismethod"
    ],
    [
        "LOAD_FAST",
        "dtype"
    ],
    [
        "CALL",
        "inspect.ismethod(dtype)"
    ],
    [
        "LOAD_ATTR",
        "'{}.dtype'.format"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL",
        "'{}.dtype'.format(source)"
    ],
    [
        "LOAD_FAST",
        "dtype"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_DEREF",
        "output"
    ],
    [
        "LOAD_GLOBAL",
        "six"
    ],
    [
        "LOAD_ATTR",
        "six.string_types"
    ],
    [
        "CALL",
        "isinstance(output, six.string_types)"
    ],
    [
        "LOAD_GLOBAL",
        "is_pathlike"
    ],
    [
        "LOAD_DEREF",
        "output"
    ],
    [
        "CALL",
        "is_pathlike(output)"
    ],
    [
        "STORE_FAST",
        "is_path"
    ],
    [
        "LOAD_FAST",
        "is_path"
    ],
    [
        "LOAD_GLOBAL",
        "FileWriter"
    ],
    [
        "LOAD_DEREF",
        "output"
    ],
    [
        "LOAD_FAST",
        "overwrite"
    ],
    [
        "CALL",
        "FileWriter(output, overwrite)"
    ],
    [
        "LOAD_ATTR",
        "FileWriter(output, overwrite).write"
    ],
    [
        "LOAD_GLOBAL",
        "callable"
    ],
    [
        "LOAD_DEREF",
        "output"
    ],
    [
        "CALL",
        "callable(output)"
    ],
    [
        "LOAD_DEREF",
        "output"
    ],
    [
        "STORE_FAST",
        "write"
    ],
    [
        "LOAD_FAST",
        "write"
    ],
    [
        "STORE_FAST",
        "        def write(s):\n            stream = output\n\n            if stream is None:\n                stream = sys.stderr\n\n            try:\n                stream.write(s)\n            except UnicodeEncodeError:\n                # God damn Python 2\n                stream.write(shitcode(s))"
    ],
    [
        "LOAD_FAST",
        "write"
    ],
    [
        "LOAD_DEREF",
        "output"
    ],
    [
        "STORE_FAST",
        "stream"
    ],
    [
        "LOAD_FAST",
        "stream"
    ],
    [
        "LOAD_GLOBAL",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.stderr"
    ],
    [
        "STORE_FAST",
        "stream"
    ],
    [
        "LOAD_FAST",
        "stream"
    ],
    [
        "LOAD_ATTR",
        "stream.write"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL",
        "stream.write(s)"
    ],
    [
        "LOAD_GLOBAL",
        "UnicodeEncodeError"
    ],
    [
        "LOAD_FAST",
        "stream"
    ],
    [
        "LOAD_ATTR",
        "stream.write"
    ],
    [
        "LOAD_GLOBAL",
        "shitcode"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL",
        "shitcode(s)"
    ],
    [
        "CALL",
        "stream.write(shitcode(s))"
    ],
    [
        "STORE_NAME",
        "    def __init__(self, path, overwrite):\n        self.path = six.text_type(path)\n        self.overwrite = overwrite"
    ],
    [
        "STORE_NAME",
        "    def write(self, s):\n        with open(self.path, 'w' if self.overwrite else 'a', encoding='utf-8') as f:\n            f.write(s)\n        self.overwrite = False"
    ],
    [
        "LOAD_GLOBAL",
        "six"
    ],
    [
        "LOAD_ATTR",
        "six.text_type"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL",
        "six.text_type(path)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.path"
    ],
    [
        "LOAD_FAST",
        "overwrite"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.overwrite"
    ],
    [
        "LOAD_GLOBAL",
        "open"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.path"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.overwrite"
    ],
    [
        "CALL",
        "open(self.path, 'w' if self.overwrite else 'a', encoding='utf-8')"
    ],
    [
        "STORE_FAST",
        "f"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "LOAD_ATTR",
        "f.write"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL",
        "f.write(s)"
    ],
    [
        "CALL",
        "        with open(self.path, 'w' if self.overwrite else 'a', encoding='utf-8') as f:\n            f.write(s)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.overwrite"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.overwrite"
    ]
]