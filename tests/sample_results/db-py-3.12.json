[
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "from __future__ import print_function, division, absolute_import"
    ],
    [
        "STORE_NAME",
        "import functools"
    ],
    [
        "STORE_NAME",
        "import sys"
    ],
    [
        "STORE_NAME",
        "from future import standard_library"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.exc import OperationalError, InterfaceError, InternalError, ProgrammingError, ArgumentError"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.exc import OperationalError, InterfaceError, InternalError, ProgrammingError, ArgumentError"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.exc import OperationalError, InterfaceError, InternalError, ProgrammingError, ArgumentError"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.exc import OperationalError, InterfaceError, InternalError, ProgrammingError, ArgumentError"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.exc import OperationalError, InterfaceError, InternalError, ProgrammingError, ArgumentError"
    ],
    [
        "LOAD_NAME",
        "standard_library"
    ],
    [
        "LOAD_ATTR",
        "standard_library.install_aliases"
    ],
    [
        "CALL",
        "standard_library.install_aliases()"
    ],
    [
        "STORE_NAME",
        "import json"
    ],
    [
        "STORE_NAME",
        "import os"
    ],
    [
        "STORE_NAME",
        "from typing import List"
    ],
    [
        "STORE_NAME",
        "from contextlib import contextmanager"
    ],
    [
        "STORE_NAME",
        "from humanize import naturaltime"
    ],
    [
        "STORE_NAME",
        "from markupsafe import Markup"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy import Sequence, UniqueConstraint, create_engine, Column, Integer, Text, ForeignKey, DateTime, String, \\\n    Index"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.ext.declarative import declarative_base, declared_attr"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.ext.declarative import declarative_base, declared_attr"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.orm import backref, relationship, sessionmaker"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.orm import backref, relationship, sessionmaker"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.orm import backref, relationship, sessionmaker"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.dialects.mysql import LONGTEXT"
    ],
    [
        "STORE_NAME",
        "from littleutils import select_attrs, retry"
    ],
    [
        "STORE_NAME",
        "from littleutils import select_attrs, retry"
    ],
    [
        "STORE_NAME",
        "from birdseye.utils import IPYTHON_FILE_PATH, is_ipython_cell"
    ],
    [
        "STORE_NAME",
        "from birdseye.utils import IPYTHON_FILE_PATH, is_ipython_cell"
    ],
    [
        "STORE_NAME",
        "from sqlalchemy.dialects.mysql.base import RESERVED_WORDS"
    ],
    [
        "LOAD_NAME",
        "RESERVED_WORDS"
    ],
    [
        "LOAD_ATTR",
        "RESERVED_WORDS.add"
    ],
    [
        "CALL",
        "RESERVED_WORDS.add('function')"
    ],
    [
        "STORE_NAME",
        "DB_VERSION"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "CALL",
        "class Database(object):\n    def __init__(self, db_uri=None, _skip_version_check=False):\n        self.db_uri = db_uri = (\n                db_uri\n                or os.environ.get('BIRDSEYE_DB')\n                or os.path.join(os.path.expanduser('~'),\n                                '.birdseye.db'))\n\n        kwargs = dict(\n            pool_recycle=280,\n            echo=False,  # for convenience when debugging\n        )\n\n        try:\n            engine = create_engine(db_uri, **kwargs)\n        except ArgumentError:\n            db_uri = 'sqlite:///' + db_uri\n            engine = create_engine(db_uri, **kwargs)\n\n        self.engine = engine\n\n        self.Session = sessionmaker(bind=engine)\n\n        class Base(object):\n            @declared_attr\n            def __tablename__(cls):\n                return cls.__name__.lower()\n\n        Base = declarative_base(cls=Base)  # type: ignore\n\n        class KeyValue(Base):\n            key = Column(String(50), primary_key=True)\n            value = Column(Text)\n\n        db_self = self\n\n        class KeyValueStore(object):\n            def __getitem__(self, item):\n                with db_self.session_scope() as session:\n                    return (session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar())\n\n            def __setitem__(self, key, value):\n                with db_self.session_scope() as session:\n                    session.query(KeyValue).filter_by(key=key).delete()\n                    session.add(KeyValue(key=key, value=str(value)))\n\n            __getattr__ = __getitem__\n            __setattr__ = __setitem__\n\n        LongText = LONGTEXT if engine.name == 'mysql' else Text\n\n        class Call(Base):\n            id = Column(String(length=32), primary_key=True)\n            function_id = Column(Integer, ForeignKey('function.id'), index=True)\n            function = relationship('Function', backref=backref('calls', lazy='dynamic'))\n            arguments = Column(Text)\n            return_value = Column(Text)\n            exception = Column(Text)\n            traceback = Column(Text)\n            data = Column(LongText)\n            start_time = Column(DateTime, index=True)\n\n            @property\n            def pretty_start_time(self):\n                return self._pretty_time(self.start_time)\n\n            @staticmethod\n            def _pretty_time(dt):\n                if not dt:\n                    return ''\n                return Markup('%s (%s)' % (\n                    dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S'),\n                    naturaltime(dt)))\n\n            @property\n            def state_icon(self):\n                return Markup('<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red')))\n\n            @property\n            def success(self):\n                if self.exception:\n                    assert self.traceback\n                    assert self.return_value == 'None'\n                    return False\n                else:\n                    assert not self.traceback\n                    return True\n\n            @property\n            def result(self):\n                if self.success:\n                    return str(self.return_value)\n                else:\n                    return str(self.exception)\n\n            @property\n            def arguments_list(self):\n                return json.loads(self.arguments)\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(call):\n                return dict(arguments=call.arguments_list,\n                            **select_attrs(call, 'id function_id return_value traceback '\n                                                 'exception start_time'))\n\n            basic_columns = (id, function_id, return_value,\n                             traceback, exception, start_time, arguments)\n\n        class Function(Base):\n            id = Column(Integer, Sequence('function_id_seq'), primary_key=True)\n            file = Column(Text)\n            name = Column(Text)\n            type = Column(Text)  # function or module\n            html_body = Column(LongText)\n            lineno = Column(Integer)\n            data = Column(LongText)\n            hash = Column(String(length=64), index=True)\n            body_hash = Column(String(length=64), index=True)\n\n            __table_args__ = (\n                UniqueConstraint('hash',\n                                 name='everything_unique'),\n                Index('idx_file', 'file', mysql_length=256),\n                Index('idx_name', 'name', mysql_length=32),\n            )\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(func):\n                return select_attrs(func, 'file name lineno hash body_hash type')\n\n            basic_columns = (file, name, lineno, hash, body_hash, type)\n\n        self.Call = Call\n        self.Function = Function\n        self._KeyValue = KeyValue\n\n        self.key_value_store = kv = KeyValueStore()\n\n        if _skip_version_check:\n            return\n\n        if not self.table_exists(Function):\n            Base.metadata.create_all(engine)\n            kv.version = DB_VERSION\n        elif not self.table_exists(KeyValue) or int(kv.version) < DB_VERSION:\n            sys.exit('The birdseye database schema is out of date. '\n                     'Run \"python -m birdseye.clear_db\" to delete the existing tables.')\n\n    def table_exists(self, table):\n        return self.engine.dialect.has_table(self.engine, table.__name__)\n\n    def all_file_paths(self):\n        # type: () -> List[str]\n        with self.session_scope() as session:\n            paths = [f[0] for f in session.query(self.Function.file).distinct()\n                     if not is_ipython_cell(f[0])]\n        paths.sort()\n        if IPYTHON_FILE_PATH in paths:\n            paths.remove(IPYTHON_FILE_PATH)\n            paths.insert(0, IPYTHON_FILE_PATH)\n        return paths\n\n    def clear(self):\n        for model in [self.Call, self.Function, self._KeyValue]:\n            if self.table_exists(model):\n                model.__table__.drop(self.engine)\n\n    @contextmanager\n    def session_scope(self):\n        \"\"\"Provide a transactional scope around a series of operations.\"\"\"\n        session = self.Session()\n        try:\n            yield session\n            session.commit()\n        except:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n\n    def provide_session(self, func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with self.session_scope() as session:\n                return func(session, *args, **kwargs)\n\n        return retry_db(wrapper)"
    ],
    [
        "STORE_NAME",
        "class Database(object):\n    def __init__(self, db_uri=None, _skip_version_check=False):\n        self.db_uri = db_uri = (\n                db_uri\n                or os.environ.get('BIRDSEYE_DB')\n                or os.path.join(os.path.expanduser('~'),\n                                '.birdseye.db'))\n\n        kwargs = dict(\n            pool_recycle=280,\n            echo=False,  # for convenience when debugging\n        )\n\n        try:\n            engine = create_engine(db_uri, **kwargs)\n        except ArgumentError:\n            db_uri = 'sqlite:///' + db_uri\n            engine = create_engine(db_uri, **kwargs)\n\n        self.engine = engine\n\n        self.Session = sessionmaker(bind=engine)\n\n        class Base(object):\n            @declared_attr\n            def __tablename__(cls):\n                return cls.__name__.lower()\n\n        Base = declarative_base(cls=Base)  # type: ignore\n\n        class KeyValue(Base):\n            key = Column(String(50), primary_key=True)\n            value = Column(Text)\n\n        db_self = self\n\n        class KeyValueStore(object):\n            def __getitem__(self, item):\n                with db_self.session_scope() as session:\n                    return (session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar())\n\n            def __setitem__(self, key, value):\n                with db_self.session_scope() as session:\n                    session.query(KeyValue).filter_by(key=key).delete()\n                    session.add(KeyValue(key=key, value=str(value)))\n\n            __getattr__ = __getitem__\n            __setattr__ = __setitem__\n\n        LongText = LONGTEXT if engine.name == 'mysql' else Text\n\n        class Call(Base):\n            id = Column(String(length=32), primary_key=True)\n            function_id = Column(Integer, ForeignKey('function.id'), index=True)\n            function = relationship('Function', backref=backref('calls', lazy='dynamic'))\n            arguments = Column(Text)\n            return_value = Column(Text)\n            exception = Column(Text)\n            traceback = Column(Text)\n            data = Column(LongText)\n            start_time = Column(DateTime, index=True)\n\n            @property\n            def pretty_start_time(self):\n                return self._pretty_time(self.start_time)\n\n            @staticmethod\n            def _pretty_time(dt):\n                if not dt:\n                    return ''\n                return Markup('%s (%s)' % (\n                    dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S'),\n                    naturaltime(dt)))\n\n            @property\n            def state_icon(self):\n                return Markup('<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red')))\n\n            @property\n            def success(self):\n                if self.exception:\n                    assert self.traceback\n                    assert self.return_value == 'None'\n                    return False\n                else:\n                    assert not self.traceback\n                    return True\n\n            @property\n            def result(self):\n                if self.success:\n                    return str(self.return_value)\n                else:\n                    return str(self.exception)\n\n            @property\n            def arguments_list(self):\n                return json.loads(self.arguments)\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(call):\n                return dict(arguments=call.arguments_list,\n                            **select_attrs(call, 'id function_id return_value traceback '\n                                                 'exception start_time'))\n\n            basic_columns = (id, function_id, return_value,\n                             traceback, exception, start_time, arguments)\n\n        class Function(Base):\n            id = Column(Integer, Sequence('function_id_seq'), primary_key=True)\n            file = Column(Text)\n            name = Column(Text)\n            type = Column(Text)  # function or module\n            html_body = Column(LongText)\n            lineno = Column(Integer)\n            data = Column(LongText)\n            hash = Column(String(length=64), index=True)\n            body_hash = Column(String(length=64), index=True)\n\n            __table_args__ = (\n                UniqueConstraint('hash',\n                                 name='everything_unique'),\n                Index('idx_file', 'file', mysql_length=256),\n                Index('idx_name', 'name', mysql_length=32),\n            )\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(func):\n                return select_attrs(func, 'file name lineno hash body_hash type')\n\n            basic_columns = (file, name, lineno, hash, body_hash, type)\n\n        self.Call = Call\n        self.Function = Function\n        self._KeyValue = KeyValue\n\n        self.key_value_store = kv = KeyValueStore()\n\n        if _skip_version_check:\n            return\n\n        if not self.table_exists(Function):\n            Base.metadata.create_all(engine)\n            kv.version = DB_VERSION\n        elif not self.table_exists(KeyValue) or int(kv.version) < DB_VERSION:\n            sys.exit('The birdseye database schema is out of date. '\n                     'Run \"python -m birdseye.clear_db\" to delete the existing tables.')\n\n    def table_exists(self, table):\n        return self.engine.dialect.has_table(self.engine, table.__name__)\n\n    def all_file_paths(self):\n        # type: () -> List[str]\n        with self.session_scope() as session:\n            paths = [f[0] for f in session.query(self.Function.file).distinct()\n                     if not is_ipython_cell(f[0])]\n        paths.sort()\n        if IPYTHON_FILE_PATH in paths:\n            paths.remove(IPYTHON_FILE_PATH)\n            paths.insert(0, IPYTHON_FILE_PATH)\n        return paths\n\n    def clear(self):\n        for model in [self.Call, self.Function, self._KeyValue]:\n            if self.table_exists(model):\n                model.__table__.drop(self.engine)\n\n    @contextmanager\n    def session_scope(self):\n        \"\"\"Provide a transactional scope around a series of operations.\"\"\"\n        session = self.Session()\n        try:\n            yield session\n            session.commit()\n        except:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n\n    def provide_session(self, func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with self.session_scope() as session:\n                return func(session, *args, **kwargs)\n\n        return retry_db(wrapper)"
    ],
    [
        "LOAD_NAME",
        "retry"
    ],
    [
        "LOAD_NAME",
        "InterfaceError"
    ],
    [
        "LOAD_NAME",
        "OperationalError"
    ],
    [
        "LOAD_NAME",
        "InternalError"
    ],
    [
        "LOAD_NAME",
        "ProgrammingError"
    ],
    [
        "CALL",
        "retry(3, (InterfaceError, OperationalError, InternalError, ProgrammingError))"
    ],
    [
        "STORE_NAME",
        "retry_db"
    ],
    [
        "STORE_NAME",
        "    def __init__(self, db_uri=None, _skip_version_check=False):\n        self.db_uri = db_uri = (\n                db_uri\n                or os.environ.get('BIRDSEYE_DB')\n                or os.path.join(os.path.expanduser('~'),\n                                '.birdseye.db'))\n\n        kwargs = dict(\n            pool_recycle=280,\n            echo=False,  # for convenience when debugging\n        )\n\n        try:\n            engine = create_engine(db_uri, **kwargs)\n        except ArgumentError:\n            db_uri = 'sqlite:///' + db_uri\n            engine = create_engine(db_uri, **kwargs)\n\n        self.engine = engine\n\n        self.Session = sessionmaker(bind=engine)\n\n        class Base(object):\n            @declared_attr\n            def __tablename__(cls):\n                return cls.__name__.lower()\n\n        Base = declarative_base(cls=Base)  # type: ignore\n\n        class KeyValue(Base):\n            key = Column(String(50), primary_key=True)\n            value = Column(Text)\n\n        db_self = self\n\n        class KeyValueStore(object):\n            def __getitem__(self, item):\n                with db_self.session_scope() as session:\n                    return (session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar())\n\n            def __setitem__(self, key, value):\n                with db_self.session_scope() as session:\n                    session.query(KeyValue).filter_by(key=key).delete()\n                    session.add(KeyValue(key=key, value=str(value)))\n\n            __getattr__ = __getitem__\n            __setattr__ = __setitem__\n\n        LongText = LONGTEXT if engine.name == 'mysql' else Text\n\n        class Call(Base):\n            id = Column(String(length=32), primary_key=True)\n            function_id = Column(Integer, ForeignKey('function.id'), index=True)\n            function = relationship('Function', backref=backref('calls', lazy='dynamic'))\n            arguments = Column(Text)\n            return_value = Column(Text)\n            exception = Column(Text)\n            traceback = Column(Text)\n            data = Column(LongText)\n            start_time = Column(DateTime, index=True)\n\n            @property\n            def pretty_start_time(self):\n                return self._pretty_time(self.start_time)\n\n            @staticmethod\n            def _pretty_time(dt):\n                if not dt:\n                    return ''\n                return Markup('%s (%s)' % (\n                    dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S'),\n                    naturaltime(dt)))\n\n            @property\n            def state_icon(self):\n                return Markup('<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red')))\n\n            @property\n            def success(self):\n                if self.exception:\n                    assert self.traceback\n                    assert self.return_value == 'None'\n                    return False\n                else:\n                    assert not self.traceback\n                    return True\n\n            @property\n            def result(self):\n                if self.success:\n                    return str(self.return_value)\n                else:\n                    return str(self.exception)\n\n            @property\n            def arguments_list(self):\n                return json.loads(self.arguments)\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(call):\n                return dict(arguments=call.arguments_list,\n                            **select_attrs(call, 'id function_id return_value traceback '\n                                                 'exception start_time'))\n\n            basic_columns = (id, function_id, return_value,\n                             traceback, exception, start_time, arguments)\n\n        class Function(Base):\n            id = Column(Integer, Sequence('function_id_seq'), primary_key=True)\n            file = Column(Text)\n            name = Column(Text)\n            type = Column(Text)  # function or module\n            html_body = Column(LongText)\n            lineno = Column(Integer)\n            data = Column(LongText)\n            hash = Column(String(length=64), index=True)\n            body_hash = Column(String(length=64), index=True)\n\n            __table_args__ = (\n                UniqueConstraint('hash',\n                                 name='everything_unique'),\n                Index('idx_file', 'file', mysql_length=256),\n                Index('idx_name', 'name', mysql_length=32),\n            )\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(func):\n                return select_attrs(func, 'file name lineno hash body_hash type')\n\n            basic_columns = (file, name, lineno, hash, body_hash, type)\n\n        self.Call = Call\n        self.Function = Function\n        self._KeyValue = KeyValue\n\n        self.key_value_store = kv = KeyValueStore()\n\n        if _skip_version_check:\n            return\n\n        if not self.table_exists(Function):\n            Base.metadata.create_all(engine)\n            kv.version = DB_VERSION\n        elif not self.table_exists(KeyValue) or int(kv.version) < DB_VERSION:\n            sys.exit('The birdseye database schema is out of date. '\n                     'Run \"python -m birdseye.clear_db\" to delete the existing tables.')"
    ],
    [
        "STORE_NAME",
        "    def table_exists(self, table):\n        return self.engine.dialect.has_table(self.engine, table.__name__)"
    ],
    [
        "STORE_NAME",
        "    def all_file_paths(self):\n        # type: () -> List[str]\n        with self.session_scope() as session:\n            paths = [f[0] for f in session.query(self.Function.file).distinct()\n                     if not is_ipython_cell(f[0])]\n        paths.sort()\n        if IPYTHON_FILE_PATH in paths:\n            paths.remove(IPYTHON_FILE_PATH)\n            paths.insert(0, IPYTHON_FILE_PATH)\n        return paths"
    ],
    [
        "STORE_NAME",
        "    def clear(self):\n        for model in [self.Call, self.Function, self._KeyValue]:\n            if self.table_exists(model):\n                model.__table__.drop(self.engine)"
    ],
    [
        "LOAD_NAME",
        "contextmanager"
    ],
    [
        "CALL",
        "contextmanager"
    ],
    [
        "STORE_NAME",
        "    @contextmanager\n    def session_scope(self):\n        \"\"\"Provide a transactional scope around a series of operations.\"\"\"\n        session = self.Session()\n        try:\n            yield session\n            session.commit()\n        except:\n            session.rollback()\n            raise\n        finally:\n            session.close()"
    ],
    [
        "STORE_NAME",
        "    def provide_session(self, func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with self.session_scope() as session:\n                return func(session, *args, **kwargs)\n\n        return retry_db(wrapper)"
    ],
    [
        "LOAD_FAST",
        "db_uri"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.environ"
    ],
    [
        "LOAD_ATTR",
        "os.environ.get"
    ],
    [
        "CALL",
        "os.environ.get('BIRDSEYE_DB')"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_ATTR",
        "os.path.join"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_ATTR",
        "os.path.expanduser"
    ],
    [
        "CALL",
        "os.path.expanduser('~')"
    ],
    [
        "CALL",
        "os.path.join(os.path.expanduser('~'),\n                                '.birdseye.db')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.db_uri"
    ],
    [
        "STORE_FAST",
        "db_uri"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "CALL",
        "dict(\n            pool_recycle=280,\n            echo=False,  # for convenience when debugging\n        )"
    ],
    [
        "STORE_FAST",
        "kwargs"
    ],
    [
        "LOAD_GLOBAL",
        "create_engine"
    ],
    [
        "LOAD_FAST",
        "db_uri"
    ],
    [
        "LOAD_FAST",
        "kwargs"
    ],
    [
        "CALL_FUNCTION_EX",
        "create_engine(db_uri, **kwargs)"
    ],
    [
        "STORE_FAST",
        "engine"
    ],
    [
        "LOAD_FAST",
        "engine"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.engine"
    ],
    [
        "LOAD_GLOBAL",
        "sessionmaker"
    ],
    [
        "LOAD_FAST",
        "engine"
    ],
    [
        "CALL",
        "sessionmaker(bind=engine)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.Session"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "CALL",
        "        class Base(object):\n            @declared_attr\n            def __tablename__(cls):\n                return cls.__name__.lower()"
    ],
    [
        "STORE_FAST",
        "        class Base(object):\n            @declared_attr\n            def __tablename__(cls):\n                return cls.__name__.lower()"
    ],
    [
        "LOAD_GLOBAL",
        "declarative_base"
    ],
    [
        "LOAD_FAST",
        "Base"
    ],
    [
        "CALL",
        "declarative_base(cls=Base)"
    ],
    [
        "STORE_FAST",
        "Base"
    ],
    [
        "LOAD_FAST",
        "Base"
    ],
    [
        "CALL",
        "        class KeyValue(Base):\n            key = Column(String(50), primary_key=True)\n            value = Column(Text)"
    ],
    [
        "STORE_DEREF",
        "        class KeyValue(Base):\n            key = Column(String(50), primary_key=True)\n            value = Column(Text)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_DEREF",
        "db_self"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "CALL",
        "        class KeyValueStore(object):\n            def __getitem__(self, item):\n                with db_self.session_scope() as session:\n                    return (session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar())\n\n            def __setitem__(self, key, value):\n                with db_self.session_scope() as session:\n                    session.query(KeyValue).filter_by(key=key).delete()\n                    session.add(KeyValue(key=key, value=str(value)))\n\n            __getattr__ = __getitem__\n            __setattr__ = __setitem__"
    ],
    [
        "STORE_FAST",
        "        class KeyValueStore(object):\n            def __getitem__(self, item):\n                with db_self.session_scope() as session:\n                    return (session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar())\n\n            def __setitem__(self, key, value):\n                with db_self.session_scope() as session:\n                    session.query(KeyValue).filter_by(key=key).delete()\n                    session.add(KeyValue(key=key, value=str(value)))\n\n            __getattr__ = __getitem__\n            __setattr__ = __setitem__"
    ],
    [
        "LOAD_FAST",
        "engine"
    ],
    [
        "LOAD_ATTR",
        "engine.name"
    ],
    [
        "COMPARE_OP",
        "engine.name == 'mysql'"
    ],
    [
        "LOAD_GLOBAL",
        "LONGTEXT"
    ],
    [
        "LOAD_GLOBAL",
        "Text"
    ],
    [
        "STORE_DEREF",
        "LongText"
    ],
    [
        "LOAD_FAST",
        "Base"
    ],
    [
        "CALL",
        "        class Call(Base):\n            id = Column(String(length=32), primary_key=True)\n            function_id = Column(Integer, ForeignKey('function.id'), index=True)\n            function = relationship('Function', backref=backref('calls', lazy='dynamic'))\n            arguments = Column(Text)\n            return_value = Column(Text)\n            exception = Column(Text)\n            traceback = Column(Text)\n            data = Column(LongText)\n            start_time = Column(DateTime, index=True)\n\n            @property\n            def pretty_start_time(self):\n                return self._pretty_time(self.start_time)\n\n            @staticmethod\n            def _pretty_time(dt):\n                if not dt:\n                    return ''\n                return Markup('%s (%s)' % (\n                    dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S'),\n                    naturaltime(dt)))\n\n            @property\n            def state_icon(self):\n                return Markup('<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red')))\n\n            @property\n            def success(self):\n                if self.exception:\n                    assert self.traceback\n                    assert self.return_value == 'None'\n                    return False\n                else:\n                    assert not self.traceback\n                    return True\n\n            @property\n            def result(self):\n                if self.success:\n                    return str(self.return_value)\n                else:\n                    return str(self.exception)\n\n            @property\n            def arguments_list(self):\n                return json.loads(self.arguments)\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(call):\n                return dict(arguments=call.arguments_list,\n                            **select_attrs(call, 'id function_id return_value traceback '\n                                                 'exception start_time'))\n\n            basic_columns = (id, function_id, return_value,\n                             traceback, exception, start_time, arguments)"
    ],
    [
        "STORE_FAST",
        "        class Call(Base):\n            id = Column(String(length=32), primary_key=True)\n            function_id = Column(Integer, ForeignKey('function.id'), index=True)\n            function = relationship('Function', backref=backref('calls', lazy='dynamic'))\n            arguments = Column(Text)\n            return_value = Column(Text)\n            exception = Column(Text)\n            traceback = Column(Text)\n            data = Column(LongText)\n            start_time = Column(DateTime, index=True)\n\n            @property\n            def pretty_start_time(self):\n                return self._pretty_time(self.start_time)\n\n            @staticmethod\n            def _pretty_time(dt):\n                if not dt:\n                    return ''\n                return Markup('%s (%s)' % (\n                    dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S'),\n                    naturaltime(dt)))\n\n            @property\n            def state_icon(self):\n                return Markup('<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red')))\n\n            @property\n            def success(self):\n                if self.exception:\n                    assert self.traceback\n                    assert self.return_value == 'None'\n                    return False\n                else:\n                    assert not self.traceback\n                    return True\n\n            @property\n            def result(self):\n                if self.success:\n                    return str(self.return_value)\n                else:\n                    return str(self.exception)\n\n            @property\n            def arguments_list(self):\n                return json.loads(self.arguments)\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(call):\n                return dict(arguments=call.arguments_list,\n                            **select_attrs(call, 'id function_id return_value traceback '\n                                                 'exception start_time'))\n\n            basic_columns = (id, function_id, return_value,\n                             traceback, exception, start_time, arguments)"
    ],
    [
        "LOAD_FAST",
        "Base"
    ],
    [
        "CALL",
        "        class Function(Base):\n            id = Column(Integer, Sequence('function_id_seq'), primary_key=True)\n            file = Column(Text)\n            name = Column(Text)\n            type = Column(Text)  # function or module\n            html_body = Column(LongText)\n            lineno = Column(Integer)\n            data = Column(LongText)\n            hash = Column(String(length=64), index=True)\n            body_hash = Column(String(length=64), index=True)\n\n            __table_args__ = (\n                UniqueConstraint('hash',\n                                 name='everything_unique'),\n                Index('idx_file', 'file', mysql_length=256),\n                Index('idx_name', 'name', mysql_length=32),\n            )\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(func):\n                return select_attrs(func, 'file name lineno hash body_hash type')\n\n            basic_columns = (file, name, lineno, hash, body_hash, type)"
    ],
    [
        "STORE_FAST",
        "        class Function(Base):\n            id = Column(Integer, Sequence('function_id_seq'), primary_key=True)\n            file = Column(Text)\n            name = Column(Text)\n            type = Column(Text)  # function or module\n            html_body = Column(LongText)\n            lineno = Column(Integer)\n            data = Column(LongText)\n            hash = Column(String(length=64), index=True)\n            body_hash = Column(String(length=64), index=True)\n\n            __table_args__ = (\n                UniqueConstraint('hash',\n                                 name='everything_unique'),\n                Index('idx_file', 'file', mysql_length=256),\n                Index('idx_name', 'name', mysql_length=32),\n            )\n\n            @property\n            def parsed_data(self):\n                return json.loads(self.data)\n\n            @staticmethod\n            def basic_dict(func):\n                return select_attrs(func, 'file name lineno hash body_hash type')\n\n            basic_columns = (file, name, lineno, hash, body_hash, type)"
    ],
    [
        "LOAD_FAST",
        "Call"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.Call"
    ],
    [
        "LOAD_FAST",
        "Function"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.Function"
    ],
    [
        "LOAD_DEREF",
        "KeyValue"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._KeyValue"
    ],
    [
        "LOAD_FAST",
        "KeyValueStore"
    ],
    [
        "CALL",
        "KeyValueStore()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.key_value_store"
    ],
    [
        "STORE_FAST",
        "kv"
    ],
    [
        "LOAD_FAST",
        "_skip_version_check"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.table_exists"
    ],
    [
        "LOAD_FAST",
        "Function"
    ],
    [
        "CALL",
        "self.table_exists(Function)"
    ],
    [
        "LOAD_FAST",
        "Base"
    ],
    [
        "LOAD_ATTR",
        "Base.metadata"
    ],
    [
        "LOAD_ATTR",
        "Base.metadata.create_all"
    ],
    [
        "LOAD_FAST",
        "engine"
    ],
    [
        "CALL",
        "Base.metadata.create_all(engine)"
    ],
    [
        "LOAD_GLOBAL",
        "DB_VERSION"
    ],
    [
        "LOAD_FAST",
        "kv"
    ],
    [
        "STORE_ATTR",
        "kv.version"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.table_exists"
    ],
    [
        "LOAD_DEREF",
        "KeyValue"
    ],
    [
        "CALL",
        "self.table_exists(KeyValue)"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "kv"
    ],
    [
        "LOAD_ATTR",
        "kv.version"
    ],
    [
        "CALL",
        "int(kv.version)"
    ],
    [
        "LOAD_GLOBAL",
        "DB_VERSION"
    ],
    [
        "COMPARE_OP",
        "int(kv.version) < DB_VERSION"
    ],
    [
        "LOAD_GLOBAL",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.exit"
    ],
    [
        "CALL",
        "sys.exit('The birdseye database schema is out of date. '\n                     'Run \"python -m birdseye.clear_db\" to delete the existing tables.')"
    ],
    [
        "LOAD_GLOBAL",
        "ArgumentError"
    ],
    [
        "LOAD_FAST",
        "db_uri"
    ],
    [
        "BINARY_OP",
        "'sqlite:///' + db_uri"
    ],
    [
        "STORE_FAST",
        "db_uri"
    ],
    [
        "LOAD_GLOBAL",
        "create_engine"
    ],
    [
        "LOAD_FAST",
        "db_uri"
    ],
    [
        "LOAD_FAST",
        "kwargs"
    ],
    [
        "CALL_FUNCTION_EX",
        "create_engine(db_uri, **kwargs)"
    ],
    [
        "STORE_FAST",
        "engine"
    ],
    [
        "LOAD_NAME",
        "declared_attr"
    ],
    [
        "CALL",
        "declared_attr"
    ],
    [
        "STORE_NAME",
        "            @declared_attr\n            def __tablename__(cls):\n                return cls.__name__.lower()"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_ATTR",
        "cls.__name__"
    ],
    [
        "LOAD_ATTR",
        "cls.__name__.lower"
    ],
    [
        "CALL",
        "cls.__name__.lower()"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "String"
    ],
    [
        "CALL",
        "String(50)"
    ],
    [
        "CALL",
        "Column(String(50), primary_key=True)"
    ],
    [
        "STORE_NAME",
        "key"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Text"
    ],
    [
        "CALL",
        "Column(Text)"
    ],
    [
        "STORE_NAME",
        "value"
    ],
    [
        "STORE_NAME",
        "            def __getitem__(self, item):\n                with db_self.session_scope() as session:\n                    return (session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar())"
    ],
    [
        "STORE_NAME",
        "            def __setitem__(self, key, value):\n                with db_self.session_scope() as session:\n                    session.query(KeyValue).filter_by(key=key).delete()\n                    session.add(KeyValue(key=key, value=str(value)))"
    ],
    [
        "LOAD_NAME",
        "__getitem__"
    ],
    [
        "STORE_NAME",
        "__getattr__"
    ],
    [
        "LOAD_NAME",
        "__setitem__"
    ],
    [
        "STORE_NAME",
        "__setattr__"
    ],
    [
        "LOAD_DEREF",
        "db_self"
    ],
    [
        "LOAD_ATTR",
        "db_self.session_scope"
    ],
    [
        "CALL",
        "db_self.session_scope()"
    ],
    [
        "STORE_FAST",
        "session"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session\n                            .query"
    ],
    [
        "LOAD_DEREF",
        "KeyValue"
    ],
    [
        "LOAD_ATTR",
        "KeyValue.value"
    ],
    [
        "CALL",
        "session\n                            .query(KeyValue.value)"
    ],
    [
        "LOAD_ATTR",
        "session\n                            .query(KeyValue.value)\n                            .filter_by"
    ],
    [
        "LOAD_FAST",
        "item"
    ],
    [
        "CALL",
        "session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)"
    ],
    [
        "LOAD_ATTR",
        "session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar"
    ],
    [
        "CALL",
        "session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar()"
    ],
    [
        "CALL",
        "                with db_self.session_scope() as session:\n                    return (session\n                            .query(KeyValue.value)\n                            .filter_by(key=item)\n                            .scalar())"
    ],
    [
        "LOAD_DEREF",
        "db_self"
    ],
    [
        "LOAD_ATTR",
        "db_self.session_scope"
    ],
    [
        "CALL",
        "db_self.session_scope()"
    ],
    [
        "STORE_FAST",
        "session"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.query"
    ],
    [
        "LOAD_DEREF",
        "KeyValue"
    ],
    [
        "CALL",
        "session.query(KeyValue)"
    ],
    [
        "LOAD_ATTR",
        "session.query(KeyValue).filter_by"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "CALL",
        "session.query(KeyValue).filter_by(key=key)"
    ],
    [
        "LOAD_ATTR",
        "session.query(KeyValue).filter_by(key=key).delete"
    ],
    [
        "CALL",
        "session.query(KeyValue).filter_by(key=key).delete()"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.add"
    ],
    [
        "LOAD_DEREF",
        "KeyValue"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "CALL",
        "str(value)"
    ],
    [
        "CALL",
        "KeyValue(key=key, value=str(value))"
    ],
    [
        "CALL",
        "session.add(KeyValue(key=key, value=str(value)))"
    ],
    [
        "CALL",
        "                with db_self.session_scope() as session:\n                    session.query(KeyValue).filter_by(key=key).delete()\n                    session.add(KeyValue(key=key, value=str(value)))"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "String"
    ],
    [
        "CALL",
        "String(length=32)"
    ],
    [
        "CALL",
        "Column(String(length=32), primary_key=True)"
    ],
    [
        "STORE_NAME",
        "id"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Integer"
    ],
    [
        "LOAD_NAME",
        "ForeignKey"
    ],
    [
        "CALL",
        "ForeignKey('function.id')"
    ],
    [
        "CALL",
        "Column(Integer, ForeignKey('function.id'), index=True)"
    ],
    [
        "STORE_NAME",
        "function_id"
    ],
    [
        "LOAD_NAME",
        "relationship"
    ],
    [
        "LOAD_NAME",
        "backref"
    ],
    [
        "CALL",
        "backref('calls', lazy='dynamic')"
    ],
    [
        "CALL",
        "relationship('Function', backref=backref('calls', lazy='dynamic'))"
    ],
    [
        "STORE_NAME",
        "function"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Text"
    ],
    [
        "CALL",
        "Column(Text)"
    ],
    [
        "STORE_NAME",
        "arguments"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Text"
    ],
    [
        "CALL",
        "Column(Text)"
    ],
    [
        "STORE_NAME",
        "return_value"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Text"
    ],
    [
        "CALL",
        "Column(Text)"
    ],
    [
        "STORE_NAME",
        "exception"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Text"
    ],
    [
        "CALL",
        "Column(Text)"
    ],
    [
        "STORE_NAME",
        "traceback"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_FROM_DICT_OR_DEREF",
        "LongText"
    ],
    [
        "CALL",
        "Column(LongText)"
    ],
    [
        "STORE_NAME",
        "data"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "DateTime"
    ],
    [
        "CALL",
        "Column(DateTime, index=True)"
    ],
    [
        "STORE_NAME",
        "start_time"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL",
        "property"
    ],
    [
        "STORE_NAME",
        "            @property\n            def pretty_start_time(self):\n                return self._pretty_time(self.start_time)"
    ],
    [
        "LOAD_NAME",
        "staticmethod"
    ],
    [
        "CALL",
        "staticmethod"
    ],
    [
        "STORE_NAME",
        "            @staticmethod\n            def _pretty_time(dt):\n                if not dt:\n                    return ''\n                return Markup('%s (%s)' % (\n                    dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S'),\n                    naturaltime(dt)))"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL",
        "property"
    ],
    [
        "STORE_NAME",
        "            @property\n            def state_icon(self):\n                return Markup('<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red')))"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL",
        "property"
    ],
    [
        "STORE_NAME",
        "            @property\n            def success(self):\n                if self.exception:\n                    assert self.traceback\n                    assert self.return_value == 'None'\n                    return False\n                else:\n                    assert not self.traceback\n                    return True"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL",
        "property"
    ],
    [
        "STORE_NAME",
        "            @property\n            def result(self):\n                if self.success:\n                    return str(self.return_value)\n                else:\n                    return str(self.exception)"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL",
        "property"
    ],
    [
        "STORE_NAME",
        "            @property\n            def arguments_list(self):\n                return json.loads(self.arguments)"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL",
        "property"
    ],
    [
        "STORE_NAME",
        "            @property\n            def parsed_data(self):\n                return json.loads(self.data)"
    ],
    [
        "LOAD_NAME",
        "staticmethod"
    ],
    [
        "CALL",
        "staticmethod"
    ],
    [
        "STORE_NAME",
        "            @staticmethod\n            def basic_dict(call):\n                return dict(arguments=call.arguments_list,\n                            **select_attrs(call, 'id function_id return_value traceback '\n                                                 'exception start_time'))"
    ],
    [
        "LOAD_NAME",
        "id"
    ],
    [
        "LOAD_NAME",
        "function_id"
    ],
    [
        "LOAD_NAME",
        "return_value"
    ],
    [
        "LOAD_NAME",
        "traceback"
    ],
    [
        "LOAD_NAME",
        "exception"
    ],
    [
        "LOAD_NAME",
        "start_time"
    ],
    [
        "LOAD_NAME",
        "arguments"
    ],
    [
        "STORE_NAME",
        "basic_columns"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._pretty_time"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.start_time"
    ],
    [
        "CALL",
        "self._pretty_time(self.start_time)"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_GLOBAL",
        "Markup"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_ATTR",
        "dt.strftime"
    ],
    [
        "CALL",
        "dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S')"
    ],
    [
        "LOAD_GLOBAL",
        "naturaltime"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "CALL",
        "naturaltime(dt)"
    ],
    [
        "BUILD_STRING",
        "'%s (%s)' % (\n                    dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S'),\n                    naturaltime(dt))"
    ],
    [
        "CALL",
        "Markup('%s (%s)' % (\n                    dt.strftime('%Y-%m-%d&nbsp;%H:%M:%S'),\n                    naturaltime(dt)))"
    ],
    [
        "LOAD_GLOBAL",
        "Markup"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.success"
    ],
    [
        "BINARY_OP",
        "'<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red'))"
    ],
    [
        "CALL",
        "Markup('<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red')))"
    ],
    [
        "BINARY_OP",
        "'<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red'))"
    ],
    [
        "CALL",
        "Markup('<span class=\"glyphicon glyphicon-%s\" '\n                              'style=\"color: %s\"></span>' % (\n                                  ('ok', 'green') if self.success else\n                                  ('remove', 'red')))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.exception"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.traceback"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.return_value"
    ],
    [
        "COMPARE_OP",
        "self.return_value == 'None'"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.traceback"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.success"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.return_value"
    ],
    [
        "CALL",
        "str(self.return_value)"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.exception"
    ],
    [
        "CALL",
        "str(self.exception)"
    ],
    [
        "LOAD_GLOBAL",
        "json"
    ],
    [
        "LOAD_ATTR",
        "json.loads"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.arguments"
    ],
    [
        "CALL",
        "json.loads(self.arguments)"
    ],
    [
        "LOAD_GLOBAL",
        "json"
    ],
    [
        "LOAD_ATTR",
        "json.loads"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.data"
    ],
    [
        "CALL",
        "json.loads(self.data)"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_ATTR",
        "call.arguments_list"
    ],
    [
        "LOAD_GLOBAL",
        "select_attrs"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "CALL",
        "select_attrs(call, 'id function_id return_value traceback '\n                                                 'exception start_time')"
    ],
    [
        "CALL_FUNCTION_EX",
        "dict(arguments=call.arguments_list,\n                            **select_attrs(call, 'id function_id return_value traceback '\n                                                 'exception start_time'))"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Integer"
    ],
    [
        "LOAD_NAME",
        "Sequence"
    ],
    [
        "CALL",
        "Sequence('function_id_seq')"
    ],
    [
        "CALL",
        "Column(Integer, Sequence('function_id_seq'), primary_key=True)"
    ],
    [
        "STORE_NAME",
        "id"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Text"
    ],
    [
        "CALL",
        "Column(Text)"
    ],
    [
        "STORE_NAME",
        "file"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Text"
    ],
    [
        "CALL",
        "Column(Text)"
    ],
    [
        "STORE_NAME",
        "name"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Text"
    ],
    [
        "CALL",
        "Column(Text)"
    ],
    [
        "STORE_NAME",
        "type"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_FROM_DICT_OR_DEREF",
        "LongText"
    ],
    [
        "CALL",
        "Column(LongText)"
    ],
    [
        "STORE_NAME",
        "html_body"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "Integer"
    ],
    [
        "CALL",
        "Column(Integer)"
    ],
    [
        "STORE_NAME",
        "lineno"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_FROM_DICT_OR_DEREF",
        "LongText"
    ],
    [
        "CALL",
        "Column(LongText)"
    ],
    [
        "STORE_NAME",
        "data"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "String"
    ],
    [
        "CALL",
        "String(length=64)"
    ],
    [
        "CALL",
        "Column(String(length=64), index=True)"
    ],
    [
        "STORE_NAME",
        "hash"
    ],
    [
        "LOAD_NAME",
        "Column"
    ],
    [
        "LOAD_NAME",
        "String"
    ],
    [
        "CALL",
        "String(length=64)"
    ],
    [
        "CALL",
        "Column(String(length=64), index=True)"
    ],
    [
        "STORE_NAME",
        "body_hash"
    ],
    [
        "LOAD_NAME",
        "UniqueConstraint"
    ],
    [
        "CALL",
        "UniqueConstraint('hash',\n                                 name='everything_unique')"
    ],
    [
        "LOAD_NAME",
        "Index"
    ],
    [
        "CALL",
        "Index('idx_file', 'file', mysql_length=256)"
    ],
    [
        "LOAD_NAME",
        "Index"
    ],
    [
        "CALL",
        "Index('idx_name', 'name', mysql_length=32)"
    ],
    [
        "STORE_NAME",
        "__table_args__"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL",
        "property"
    ],
    [
        "STORE_NAME",
        "            @property\n            def parsed_data(self):\n                return json.loads(self.data)"
    ],
    [
        "LOAD_NAME",
        "staticmethod"
    ],
    [
        "CALL",
        "staticmethod"
    ],
    [
        "STORE_NAME",
        "            @staticmethod\n            def basic_dict(func):\n                return select_attrs(func, 'file name lineno hash body_hash type')"
    ],
    [
        "LOAD_NAME",
        "file"
    ],
    [
        "LOAD_NAME",
        "name"
    ],
    [
        "LOAD_NAME",
        "lineno"
    ],
    [
        "LOAD_NAME",
        "hash"
    ],
    [
        "LOAD_NAME",
        "body_hash"
    ],
    [
        "LOAD_NAME",
        "type"
    ],
    [
        "STORE_NAME",
        "basic_columns"
    ],
    [
        "LOAD_GLOBAL",
        "json"
    ],
    [
        "LOAD_ATTR",
        "json.loads"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.data"
    ],
    [
        "CALL",
        "json.loads(self.data)"
    ],
    [
        "LOAD_GLOBAL",
        "select_attrs"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL",
        "select_attrs(func, 'file name lineno hash body_hash type')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.engine"
    ],
    [
        "LOAD_ATTR",
        "self.engine.dialect"
    ],
    [
        "LOAD_ATTR",
        "self.engine.dialect.has_table"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.engine"
    ],
    [
        "LOAD_FAST",
        "table"
    ],
    [
        "LOAD_ATTR",
        "table.__name__"
    ],
    [
        "CALL",
        "self.engine.dialect.has_table(self.engine, table.__name__)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.session_scope"
    ],
    [
        "CALL",
        "self.session_scope()"
    ],
    [
        "STORE_FAST",
        "session"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.query"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.Function"
    ],
    [
        "LOAD_ATTR",
        "self.Function.file"
    ],
    [
        "CALL",
        "session.query(self.Function.file)"
    ],
    [
        "LOAD_ATTR",
        "session.query(self.Function.file).distinct"
    ],
    [
        "CALL",
        "session.query(self.Function.file).distinct()"
    ],
    [
        "LOAD_FAST_AND_CLEAR",
        "[f[0] for f in session.query(self.Function.file).distinct()\n                     if not is_ipython_cell(f[0])]"
    ],
    [
        "STORE_FAST",
        "f"
    ],
    [
        "LOAD_GLOBAL",
        "is_ipython_cell"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "BINARY_SUBSCR",
        "f[0]"
    ],
    [
        "CALL",
        "is_ipython_cell(f[0])"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "BINARY_SUBSCR",
        "f[0]"
    ],
    [
        "STORE_FAST",
        "paths"
    ],
    [
        "STORE_FAST",
        "[f[0] for f in session.query(self.Function.file).distinct()\n                     if not is_ipython_cell(f[0])]"
    ],
    [
        "CALL",
        "        with self.session_scope() as session:\n            paths = [f[0] for f in session.query(self.Function.file).distinct()\n                     if not is_ipython_cell(f[0])]"
    ],
    [
        "LOAD_FAST_CHECK",
        "paths"
    ],
    [
        "LOAD_ATTR",
        "paths.sort"
    ],
    [
        "CALL",
        "paths.sort()"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_FAST",
        "paths"
    ],
    [
        "CONTAINS_OP",
        "IPYTHON_FILE_PATH in paths"
    ],
    [
        "LOAD_FAST",
        "paths"
    ],
    [
        "LOAD_ATTR",
        "paths.remove"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "CALL",
        "paths.remove(IPYTHON_FILE_PATH)"
    ],
    [
        "LOAD_FAST",
        "paths"
    ],
    [
        "LOAD_ATTR",
        "paths.insert"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "CALL",
        "paths.insert(0, IPYTHON_FILE_PATH)"
    ],
    [
        "LOAD_FAST",
        "paths"
    ],
    [
        "STORE_FAST",
        "[f[0] for f in session.query(self.Function.file).distinct()\n                     if not is_ipython_cell(f[0])]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.Call"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.Function"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._KeyValue"
    ],
    [
        "STORE_FAST",
        "model"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.table_exists"
    ],
    [
        "LOAD_FAST",
        "model"
    ],
    [
        "CALL",
        "self.table_exists(model)"
    ],
    [
        "LOAD_FAST",
        "model"
    ],
    [
        "LOAD_ATTR",
        "model.__table__"
    ],
    [
        "LOAD_ATTR",
        "model.__table__.drop"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.engine"
    ],
    [
        "CALL",
        "model.__table__.drop(self.engine)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.Session"
    ],
    [
        "CALL",
        "self.Session()"
    ],
    [
        "STORE_FAST",
        "session"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.commit"
    ],
    [
        "CALL",
        "session.commit()"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.close"
    ],
    [
        "CALL",
        "session.close()"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.rollback"
    ],
    [
        "CALL",
        "session.rollback()"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.close"
    ],
    [
        "CALL",
        "session.close()"
    ],
    [
        "LOAD_GLOBAL",
        "functools"
    ],
    [
        "LOAD_ATTR",
        "functools.wraps"
    ],
    [
        "LOAD_DEREF",
        "func"
    ],
    [
        "CALL",
        "functools.wraps(func)"
    ],
    [
        "CALL",
        "functools.wraps(func)"
    ],
    [
        "STORE_FAST",
        "        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with self.session_scope() as session:\n                return func(session, *args, **kwargs)"
    ],
    [
        "LOAD_GLOBAL",
        "retry_db"
    ],
    [
        "LOAD_FAST",
        "wrapper"
    ],
    [
        "CALL",
        "retry_db(wrapper)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.session_scope"
    ],
    [
        "CALL",
        "self.session_scope()"
    ],
    [
        "STORE_FAST",
        "session"
    ],
    [
        "LOAD_DEREF",
        "func"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_FAST",
        "kwargs"
    ],
    [
        "CALL_FUNCTION_EX",
        "func(session, *args, **kwargs)"
    ],
    [
        "CALL",
        "            with self.session_scope() as session:\n                return func(session, *args, **kwargs)"
    ]
]