[
    [
        "STORE_NAME",
        "import inspect"
    ],
    [
        "STORE_NAME",
        "import socket"
    ],
    [
        "STORE_NAME",
        "import sys"
    ],
    [
        "STORE_NAME",
        "from io import BytesIO, StringIO"
    ],
    [
        "STORE_NAME",
        "from io import BytesIO, StringIO"
    ],
    [
        "STORE_NAME",
        "from threading import current_thread, Thread"
    ],
    [
        "STORE_NAME",
        "from threading import current_thread, Thread"
    ],
    [
        "STORE_NAME",
        "from uuid import uuid4"
    ],
    [
        "STORE_NAME",
        "from IPython.core.display import HTML, display"
    ],
    [
        "STORE_NAME",
        "from IPython.core.display import HTML, display"
    ],
    [
        "STORE_NAME",
        "from IPython.core.magic import Magics, cell_magic, magics_class"
    ],
    [
        "STORE_NAME",
        "from IPython.core.magic import Magics, cell_magic, magics_class"
    ],
    [
        "STORE_NAME",
        "from IPython.core.magic import Magics, cell_magic, magics_class"
    ],
    [
        "STORE_NAME",
        "from jinja2 import Environment, PackageLoader, select_autoescape"
    ],
    [
        "STORE_NAME",
        "from jinja2 import Environment, PackageLoader, select_autoescape"
    ],
    [
        "STORE_NAME",
        "from jinja2 import Environment, PackageLoader, select_autoescape"
    ],
    [
        "STORE_NAME",
        "from traitlets import Unicode, Int, Bool"
    ],
    [
        "STORE_NAME",
        "from traitlets import Unicode, Int, Bool"
    ],
    [
        "STORE_NAME",
        "from traitlets import Unicode, Int, Bool"
    ],
    [
        "STORE_NAME",
        "from werkzeug.local import LocalProxy"
    ],
    [
        "STORE_NAME",
        "from werkzeug.serving import ThreadingMixIn"
    ],
    [
        "STORE_NAME",
        "from birdseye.bird import PY2, Database"
    ],
    [
        "STORE_NAME",
        "from birdseye.bird import PY2, Database"
    ],
    [
        "STORE_NAME",
        "from birdseye import server, eye"
    ],
    [
        "STORE_NAME",
        "from birdseye import server, eye"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "LOAD_NAME",
        "BytesIO"
    ],
    [
        "LOAD_NAME",
        "StringIO"
    ],
    [
        "STORE_NAME",
        "fake_stream"
    ],
    [
        "STORE_NAME",
        "thread_proxies"
    ],
    [
        "STORE_NAME",
        "def stream_proxy(original):\n    def p():\n        frame = inspect.currentframe()\n        while frame:\n            if frame.f_code == ThreadingMixIn.process_request_thread.__code__:\n                return fake_stream()\n            frame = frame.f_back\n        return thread_proxies.get(current_thread().ident,\n                                  original)\n\n    return LocalProxy(p)"
    ],
    [
        "LOAD_NAME",
        "stream_proxy"
    ],
    [
        "LOAD_NAME",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.stderr"
    ],
    [
        "CALL",
        "stream_proxy(sys.stderr)"
    ],
    [
        "LOAD_NAME",
        "sys"
    ],
    [
        "STORE_ATTR",
        "sys.stderr"
    ],
    [
        "LOAD_NAME",
        "stream_proxy"
    ],
    [
        "LOAD_NAME",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.stdout"
    ],
    [
        "CALL",
        "stream_proxy(sys.stdout)"
    ],
    [
        "LOAD_NAME",
        "sys"
    ],
    [
        "STORE_ATTR",
        "sys.stdout"
    ],
    [
        "STORE_NAME",
        "def run_server(port, bind_host, show_server_output):\n    if not show_server_output:\n        thread_proxies[current_thread().ident] = fake_stream()\n    try:\n        server.app.run(\n            debug=True,\n            port=port,\n            host=bind_host,\n            use_reloader=False,\n        )\n    except socket.error:\n        pass"
    ],
    [
        "LOAD_NAME",
        "Environment"
    ],
    [
        "LOAD_NAME",
        "PackageLoader"
    ],
    [
        "CALL",
        "PackageLoader('birdseye', 'templates')"
    ],
    [
        "LOAD_NAME",
        "select_autoescape"
    ],
    [
        "CALL",
        "select_autoescape(['html', 'xml'])"
    ],
    [
        "CALL",
        "Environment(\n    loader=PackageLoader('birdseye', 'templates'),\n    autoescape=select_autoescape(['html', 'xml'])\n)"
    ],
    [
        "STORE_NAME",
        "templates_env"
    ],
    [
        "LOAD_NAME",
        "magics_class"
    ],
    [
        "LOAD_NAME",
        "Magics"
    ],
    [
        "CALL",
        "@magics_class\nclass BirdsEyeMagics(Magics):\n    server_url = Unicode(\n        u'', config=True,\n        help='If set, a server will not be automatically started by %%eye. '\n             'The iframe containing birdseye output will use this value as the base '\n             'of its URL.'\n    )\n\n    port = Int(\n        7777, config=True,\n        help='Port number for the server started by %%eye.'\n    )\n\n    bind_host = Unicode(\n        '127.0.0.1', config=True,\n        help='Host that the server started by %%eye listens on. '\n             'Set to 0.0.0.0 to make it accessible anywhere.'\n    )\n\n    show_server_output = Bool(\n        False, config=True,\n        help='Set to True to show stdout and stderr from the server started by %%eye.'\n    )\n\n    db_url = Unicode(\n        u'', config=True,\n        help='The database URL that the server started by %%eye reads from. '\n             'Equivalent to the environment variable BIRDSEYE_DB.'\n    )\n\n    @cell_magic\n    def eye(self, _line, cell):\n        if not self.server_url:\n            server.db = Database(self.db_url)\n            server.Function = server.db.Function\n            server.Call = server.db.Call\n            server.Session = server.db.Session\n            Thread(\n                target=run_server,\n                args=(\n                    self.port,\n                    self.bind_host,\n                    self.show_server_output,\n                ),\n            ).start()\n\n        eye.db = Database(self.db_url)\n\n        def callback(call_id):\n            \"\"\"\n            Always executes after the cell, whether or not an exception is raised\n            in the user code.\n            \"\"\"\n            if call_id is None:  # probably means a bug\n                return\n\n            html = HTML(templates_env.get_template('ipython_iframe.html').render(\n                call_id=call_id,\n                url=self.server_url.rstrip('/'),\n                port=self.port,\n                container_id=uuid4().hex,\n            ))\n\n            # noinspection PyTypeChecker\n            display(html)\n\n        value = eye.exec_ipython_cell(cell, callback)\n        # Display the value as would happen if the %eye magic wasn't there\n        return value"
    ],
    [
        "CALL",
        "magics_class"
    ],
    [
        "STORE_NAME",
        "@magics_class\nclass BirdsEyeMagics(Magics):\n    server_url = Unicode(\n        u'', config=True,\n        help='If set, a server will not be automatically started by %%eye. '\n             'The iframe containing birdseye output will use this value as the base '\n             'of its URL.'\n    )\n\n    port = Int(\n        7777, config=True,\n        help='Port number for the server started by %%eye.'\n    )\n\n    bind_host = Unicode(\n        '127.0.0.1', config=True,\n        help='Host that the server started by %%eye listens on. '\n             'Set to 0.0.0.0 to make it accessible anywhere.'\n    )\n\n    show_server_output = Bool(\n        False, config=True,\n        help='Set to True to show stdout and stderr from the server started by %%eye.'\n    )\n\n    db_url = Unicode(\n        u'', config=True,\n        help='The database URL that the server started by %%eye reads from. '\n             'Equivalent to the environment variable BIRDSEYE_DB.'\n    )\n\n    @cell_magic\n    def eye(self, _line, cell):\n        if not self.server_url:\n            server.db = Database(self.db_url)\n            server.Function = server.db.Function\n            server.Call = server.db.Call\n            server.Session = server.db.Session\n            Thread(\n                target=run_server,\n                args=(\n                    self.port,\n                    self.bind_host,\n                    self.show_server_output,\n                ),\n            ).start()\n\n        eye.db = Database(self.db_url)\n\n        def callback(call_id):\n            \"\"\"\n            Always executes after the cell, whether or not an exception is raised\n            in the user code.\n            \"\"\"\n            if call_id is None:  # probably means a bug\n                return\n\n            html = HTML(templates_env.get_template('ipython_iframe.html').render(\n                call_id=call_id,\n                url=self.server_url.rstrip('/'),\n                port=self.port,\n                container_id=uuid4().hex,\n            ))\n\n            # noinspection PyTypeChecker\n            display(html)\n\n        value = eye.exec_ipython_cell(cell, callback)\n        # Display the value as would happen if the %eye magic wasn't there\n        return value"
    ],
    [
        "STORE_FAST",
        "    def p():\n        frame = inspect.currentframe()\n        while frame:\n            if frame.f_code == ThreadingMixIn.process_request_thread.__code__:\n                return fake_stream()\n            frame = frame.f_back\n        return thread_proxies.get(current_thread().ident,\n                                  original)"
    ],
    [
        "LOAD_GLOBAL",
        "LocalProxy"
    ],
    [
        "LOAD_FAST",
        "p"
    ],
    [
        "CALL",
        "LocalProxy(p)"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.currentframe"
    ],
    [
        "CALL",
        "inspect.currentframe()"
    ],
    [
        "STORE_FAST",
        "frame"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_GLOBAL",
        "ThreadingMixIn"
    ],
    [
        "LOAD_ATTR",
        "ThreadingMixIn.process_request_thread"
    ],
    [
        "LOAD_ATTR",
        "ThreadingMixIn.process_request_thread.__code__"
    ],
    [
        "COMPARE_OP",
        "frame.f_code == ThreadingMixIn.process_request_thread.__code__"
    ],
    [
        "LOAD_GLOBAL",
        "fake_stream"
    ],
    [
        "CALL",
        "fake_stream()"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_back"
    ],
    [
        "STORE_FAST",
        "frame"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_GLOBAL",
        "thread_proxies"
    ],
    [
        "LOAD_ATTR",
        "thread_proxies.get"
    ],
    [
        "LOAD_GLOBAL",
        "current_thread"
    ],
    [
        "CALL",
        "current_thread()"
    ],
    [
        "LOAD_ATTR",
        "current_thread().ident"
    ],
    [
        "LOAD_DEREF",
        "original"
    ],
    [
        "CALL",
        "thread_proxies.get(current_thread().ident,\n                                  original)"
    ],
    [
        "LOAD_FAST",
        "show_server_output"
    ],
    [
        "LOAD_GLOBAL",
        "fake_stream"
    ],
    [
        "CALL",
        "fake_stream()"
    ],
    [
        "LOAD_GLOBAL",
        "thread_proxies"
    ],
    [
        "LOAD_GLOBAL",
        "current_thread"
    ],
    [
        "CALL",
        "current_thread()"
    ],
    [
        "LOAD_ATTR",
        "current_thread().ident"
    ],
    [
        "STORE_SUBSCR",
        "thread_proxies[current_thread().ident]"
    ],
    [
        "LOAD_GLOBAL",
        "server"
    ],
    [
        "LOAD_ATTR",
        "server.app"
    ],
    [
        "LOAD_ATTR",
        "server.app.run"
    ],
    [
        "LOAD_FAST",
        "port"
    ],
    [
        "LOAD_FAST",
        "bind_host"
    ],
    [
        "CALL",
        "server.app.run(\n            debug=True,\n            port=port,\n            host=bind_host,\n            use_reloader=False,\n        )"
    ],
    [
        "LOAD_GLOBAL",
        "socket"
    ],
    [
        "LOAD_ATTR",
        "socket.error"
    ],
    [
        "LOAD_NAME",
        "Unicode"
    ],
    [
        "CALL",
        "Unicode(\n        u'', config=True,\n        help='If set, a server will not be automatically started by %%eye. '\n             'The iframe containing birdseye output will use this value as the base '\n             'of its URL.'\n    )"
    ],
    [
        "STORE_NAME",
        "server_url"
    ],
    [
        "LOAD_NAME",
        "Int"
    ],
    [
        "CALL",
        "Int(\n        7777, config=True,\n        help='Port number for the server started by %%eye.'\n    )"
    ],
    [
        "STORE_NAME",
        "port"
    ],
    [
        "LOAD_NAME",
        "Unicode"
    ],
    [
        "CALL",
        "Unicode(\n        '127.0.0.1', config=True,\n        help='Host that the server started by %%eye listens on. '\n             'Set to 0.0.0.0 to make it accessible anywhere.'\n    )"
    ],
    [
        "STORE_NAME",
        "bind_host"
    ],
    [
        "LOAD_NAME",
        "Bool"
    ],
    [
        "CALL",
        "Bool(\n        False, config=True,\n        help='Set to True to show stdout and stderr from the server started by %%eye.'\n    )"
    ],
    [
        "STORE_NAME",
        "show_server_output"
    ],
    [
        "LOAD_NAME",
        "Unicode"
    ],
    [
        "CALL",
        "Unicode(\n        u'', config=True,\n        help='The database URL that the server started by %%eye reads from. '\n             'Equivalent to the environment variable BIRDSEYE_DB.'\n    )"
    ],
    [
        "STORE_NAME",
        "db_url"
    ],
    [
        "LOAD_NAME",
        "cell_magic"
    ],
    [
        "CALL",
        "cell_magic"
    ],
    [
        "STORE_NAME",
        "    @cell_magic\n    def eye(self, _line, cell):\n        if not self.server_url:\n            server.db = Database(self.db_url)\n            server.Function = server.db.Function\n            server.Call = server.db.Call\n            server.Session = server.db.Session\n            Thread(\n                target=run_server,\n                args=(\n                    self.port,\n                    self.bind_host,\n                    self.show_server_output,\n                ),\n            ).start()\n\n        eye.db = Database(self.db_url)\n\n        def callback(call_id):\n            \"\"\"\n            Always executes after the cell, whether or not an exception is raised\n            in the user code.\n            \"\"\"\n            if call_id is None:  # probably means a bug\n                return\n\n            html = HTML(templates_env.get_template('ipython_iframe.html').render(\n                call_id=call_id,\n                url=self.server_url.rstrip('/'),\n                port=self.port,\n                container_id=uuid4().hex,\n            ))\n\n            # noinspection PyTypeChecker\n            display(html)\n\n        value = eye.exec_ipython_cell(cell, callback)\n        # Display the value as would happen if the %eye magic wasn't there\n        return value"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.server_url"
    ],
    [
        "LOAD_GLOBAL",
        "Database"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.db_url"
    ],
    [
        "CALL",
        "Database(self.db_url)"
    ],
    [
        "LOAD_GLOBAL",
        "server"
    ],
    [
        "STORE_ATTR",
        "server.db"
    ],
    [
        "LOAD_GLOBAL",
        "server"
    ],
    [
        "LOAD_ATTR",
        "server.db"
    ],
    [
        "LOAD_ATTR",
        "server.db.Function"
    ],
    [
        "LOAD_GLOBAL",
        "server"
    ],
    [
        "STORE_ATTR",
        "server.Function"
    ],
    [
        "LOAD_GLOBAL",
        "server"
    ],
    [
        "LOAD_ATTR",
        "server.db"
    ],
    [
        "LOAD_ATTR",
        "server.db.Call"
    ],
    [
        "LOAD_GLOBAL",
        "server"
    ],
    [
        "STORE_ATTR",
        "server.Call"
    ],
    [
        "LOAD_GLOBAL",
        "server"
    ],
    [
        "LOAD_ATTR",
        "server.db"
    ],
    [
        "LOAD_ATTR",
        "server.db.Session"
    ],
    [
        "LOAD_GLOBAL",
        "server"
    ],
    [
        "STORE_ATTR",
        "server.Session"
    ],
    [
        "LOAD_GLOBAL",
        "Thread"
    ],
    [
        "LOAD_GLOBAL",
        "run_server"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.port"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.bind_host"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.show_server_output"
    ],
    [
        "CALL",
        "Thread(\n                target=run_server,\n                args=(\n                    self.port,\n                    self.bind_host,\n                    self.show_server_output,\n                ),\n            )"
    ],
    [
        "LOAD_ATTR",
        "Thread(\n                target=run_server,\n                args=(\n                    self.port,\n                    self.bind_host,\n                    self.show_server_output,\n                ),\n            ).start"
    ],
    [
        "CALL",
        "Thread(\n                target=run_server,\n                args=(\n                    self.port,\n                    self.bind_host,\n                    self.show_server_output,\n                ),\n            ).start()"
    ],
    [
        "LOAD_GLOBAL",
        "Database"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.db_url"
    ],
    [
        "CALL",
        "Database(self.db_url)"
    ],
    [
        "LOAD_GLOBAL",
        "eye"
    ],
    [
        "STORE_ATTR",
        "eye.db"
    ],
    [
        "STORE_FAST",
        "        def callback(call_id):\n            \"\"\"\n            Always executes after the cell, whether or not an exception is raised\n            in the user code.\n            \"\"\"\n            if call_id is None:  # probably means a bug\n                return\n\n            html = HTML(templates_env.get_template('ipython_iframe.html').render(\n                call_id=call_id,\n                url=self.server_url.rstrip('/'),\n                port=self.port,\n                container_id=uuid4().hex,\n            ))\n\n            # noinspection PyTypeChecker\n            display(html)"
    ],
    [
        "LOAD_GLOBAL",
        "eye"
    ],
    [
        "LOAD_ATTR",
        "eye.exec_ipython_cell"
    ],
    [
        "LOAD_FAST",
        "cell"
    ],
    [
        "LOAD_FAST",
        "callback"
    ],
    [
        "CALL",
        "eye.exec_ipython_cell(cell, callback)"
    ],
    [
        "STORE_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "call_id"
    ],
    [
        "LOAD_GLOBAL",
        "HTML"
    ],
    [
        "LOAD_GLOBAL",
        "templates_env"
    ],
    [
        "LOAD_ATTR",
        "templates_env.get_template"
    ],
    [
        "CALL",
        "templates_env.get_template('ipython_iframe.html')"
    ],
    [
        "LOAD_ATTR",
        "templates_env.get_template('ipython_iframe.html').render"
    ],
    [
        "LOAD_FAST",
        "call_id"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.server_url"
    ],
    [
        "LOAD_ATTR",
        "self.server_url.rstrip"
    ],
    [
        "CALL",
        "self.server_url.rstrip('/')"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.port"
    ],
    [
        "LOAD_GLOBAL",
        "uuid4"
    ],
    [
        "CALL",
        "uuid4()"
    ],
    [
        "LOAD_ATTR",
        "uuid4().hex"
    ],
    [
        "CALL",
        "templates_env.get_template('ipython_iframe.html').render(\n                call_id=call_id,\n                url=self.server_url.rstrip('/'),\n                port=self.port,\n                container_id=uuid4().hex,\n            )"
    ],
    [
        "CALL",
        "HTML(templates_env.get_template('ipython_iframe.html').render(\n                call_id=call_id,\n                url=self.server_url.rstrip('/'),\n                port=self.port,\n                container_id=uuid4().hex,\n            ))"
    ],
    [
        "STORE_FAST",
        "html"
    ],
    [
        "LOAD_GLOBAL",
        "display"
    ],
    [
        "LOAD_FAST",
        "html"
    ],
    [
        "CALL",
        "display(html)"
    ]
]